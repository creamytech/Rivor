import { createCipheriv, createDecipheriv, randomBytes } from 'crypto';\n\nexport interface EncryptionResult {\n  iv: Uint8Array;\n  authTag: Uint8Array;\n  ciphertext: Uint8Array;\n}\n\nexport function aes256gcmEncrypt(plaintext: Uint8Array, dek: Uint8Array, aad?: Uint8Array): EncryptionResult {\n  if (dek.length !== 32) throw new Error('DEK must be 32 bytes for AES-256-GCM');\n  const iv = randomBytes(12);\n  const cipher = createCipheriv('aes-256-gcm', dek, iv);\n  if (aad) cipher.setAAD(Buffer.from(aad));\n  const ciphertext = Buffer.concat([cipher.update(plaintext), cipher.final()]);\n  const authTag = cipher.getAuthTag();\n  return { iv: new Uint8Array(iv), authTag: new Uint8Array(authTag), ciphertext: new Uint8Array(ciphertext) };\n}\n\nexport function aes256gcmDecrypt(enc: EncryptionResult, dek: Uint8Array, aad?: Uint8Array): Uint8Array {\n  if (dek.length !== 32) throw new Error('DEK must be 32 bytes for AES-256-GCM');\n  const decipher = createDecipheriv('aes-256-gcm', dek, Buffer.from(enc.iv));\n  if (aad) decipher.setAAD(Buffer.from(aad));\n  decipher.setAuthTag(Buffer.from(enc.authTag));\n  const plaintext = Buffer.concat([decipher.update(Buffer.from(enc.ciphertext)), decipher.final()]);\n  return new Uint8Array(plaintext);\n}\n
