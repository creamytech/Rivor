// prisma schema for rivor core models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for robust account management
enum ConnectionStatus {
  connected
  action_needed
  disconnected
}

enum SyncStatus {
  idle
  scheduled
  running
  error
}

enum EncryptionStatus {
  ok
  pending
  failed
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  name          String?
  image         String?
  timezone      String         @default("America/New_York")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // NextAuth.js relations
  accounts      Account[]
  sessions      Session[]
  
  // Rivor relations
  orgMembers    OrgMember[]
  oauthAccounts OAuthAccount[]
  emailAccounts EmailAccount[] @relation("UserEmailAccounts")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Org {
  id                   String              @id @default(cuid())
  name                 String
  slug                 String?             // Organization slug for URL-friendly identification
  ownerUserId          String?             // FK to User who owns this org
  brandName            String              @default("Rivor")
  encryptedDekBlob     Bytes
  dekVersion           Int                 @default(1)
  ephemeralMode        Boolean             @default(false)
  retentionDays        Int                 @default(90)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  members              OrgMember[]
  emailAccounts        EmailAccount[]
  calendarAccounts     CalendarAccount[]
  contacts             Contact[]
  leads                Lead[]
  pipelineStages       PipelineStage[]
  threads              EmailThread[]
  messages             EmailMessage[]
  calendarEvents       CalendarEvent[]
  tasks                Task[]
  webhookSubscriptions WebhookSubscription[]
  stripeCustomers      StripeCustomer[]
  subscriptions        Subscription[]
  audits               AuditLog[]
  secureTokens         SecureToken[]       @relation("OrgSecureTokens")
}

model OrgMember {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations for assigned items
  assignedLeads Lead[] @relation("LeadAssignments")
  assignedTasks Task[] @relation("TaskAssignments")

  @@unique([orgId, userId])
}

model OAuthAccount {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  provider      String
  providerId    String
  accessToken   Bytes
  refreshToken  Bytes
  scope         String?
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([provider, providerId])
}

model EmailAccount {
  id                    String            @id @default(cuid())
  org                   Org               @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId                 String
  user                  User              @relation("UserEmailAccounts", fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  provider              String            // "google", "microsoft"
  externalAccountId     String            // Google user ID (sub) or Microsoft user ID
  email                 String            // User's email address from provider
  displayName           String?           // Display name from provider
  
  // Connection state
  status                ConnectionStatus  @default(connected)
  
  // Sync state  
  syncStatus            SyncStatus        @default(idle)
  lastSyncedAt          DateTime?
  errorReason           String?
  
  // Encryption state
  encryptionStatus      EncryptionStatus  @default(pending)
  keyVersion            Int?
  kmsErrorCode          String?
  kmsErrorAt            DateTime?
  
  // Token reference (not raw tokens)
  tokenRef              String?           // Reference to secure store entry
  
  // Legacy fields for backward compatibility
  historyId             String?
  watchExpiration       DateTime?
  watchResourceId       String?
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  threads               EmailThread[]

  @@unique([userId, provider])
  @@unique([orgId, provider, externalAccountId])
}

// Secure token storage with KMS encryption
model SecureToken {
  id                    String            @id @default(cuid())
  tokenRef              String            @unique  // Reference key for lookups
  org                   Org               @relation("OrgSecureTokens", fields: [orgId], references: [id], onDelete: Cascade)
  orgId                 String
  provider              String            // "google", "microsoft"
  tokenType             String            // "oauth_access", "oauth_refresh"
  encryptedTokenBlob    Bytes?            // KMS-encrypted token data
  encryptionStatus      EncryptionStatus  @default(pending)
  keyVersion            Int?
  kmsErrorCode          String?
  kmsErrorAt            DateTime?
  expiresAt             DateTime?         // Token expiration
  retryCount            Int               @default(0)
  lastRetryAt           DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([tokenRef])
  @@index([orgId, provider])
  @@index([encryptionStatus])
}

model EmailThread {
  id                 String        @id @default(cuid())
  org                Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId              String
  account            EmailAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId          String
  subjectEnc         Bytes?
  participantsEnc    Bytes?
  subjectIndex       String?       @db.Text
  participantsIndex  String?       @db.Text
  summaryEnc         Bytes?
  summaryAt          DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  messages           EmailMessage[]
}

model EmailMessage {
  id                 String       @id @default(cuid())
  thread             EmailThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId           String
  org                Org          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId              String
  messageId          String       // External message ID from provider
  sentAt             DateTime
  fromEnc            Bytes?
  toEnc              Bytes?
  ccEnc              Bytes?
  bccEnc             Bytes?
  subjectEnc         Bytes?
  snippetEnc         Bytes?
  bodyRefEnc         Bytes?
  attachmentsMetaEnc Bytes?
  subjectIndex       String?      @db.Text
  participantsIndex  String?      @db.Text
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@unique([orgId, messageId])
}

model CalendarAccount {
  id                String    @id @default(cuid())
  org               Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId             String
  provider          String
  status            String    @default("connected")
  channelId         String?
  channelResourceId String?
  channelExpiration DateTime?
  webhookEndpoint   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  events            CalendarEvent[]
}

model CalendarEvent {
  id             String          @id @default(cuid())
  org            Org             @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId          String
  account        CalendarAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      String
  start          DateTime
  end            DateTime
  titleEnc       Bytes?
  locationEnc    Bytes?
  notesEnc       Bytes?
  attendeesEnc   Bytes?
  titleIndex     String?         @db.Text
  locationIndex  String?         @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Contact {
  id              String     @id @default(cuid())
  org             Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId           String
  nameEnc         Bytes?
  emailEnc        Bytes?
  phoneEnc        Bytes?
  companyEnc      Bytes?
  titleEnc        Bytes?
  addressEnc      Bytes?
  notesEnc        Bytes?
  nameIndex       String?    @db.Text
  emailIndex      String?    @db.Text
  companyIndex    String?    @db.Text
  source          String?    // email, manual, import, etc.
  tags            String[]   // Array of tag strings
  lastActivity    DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  leads           Lead[]

  @@unique([orgId, emailIndex])
}

model Lead {
  id                   String          @id @default(cuid())
  org                  Org             @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId                String
  contact              Contact?        @relation(fields: [contactId], references: [id])
  contactId            String?
  stage                PipelineStage?  @relation(fields: [stageId], references: [id])
  stageId              String?
  title                String?         // Deal title/name
  dealValueEnc         Bytes?          // Deal amount
  probabilityPercent   Int?            // Win probability 0-100
  notesEnc             Bytes?
  status               String          @default("active") // active, won, lost, archived
  priority             String          @default("medium") // low, medium, high
  source               String?         // email, manual, import, etc.
  assignedTo           OrgMember?      @relation("LeadAssignments", fields: [assignedToId], references: [id])
  assignedToId         String?         // OrgMember ID
  sourceThreadId       String?         // Link to email thread if created from email
  expectedCloseDate    DateTime?
  actualCloseDate      DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  tasks                Task[]          @relation("LeadTasks")
}

model Task {
  id              String    @id @default(cuid())
  org             Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId           String
  title           String
  description     String?
  dueAt           DateTime?
  done            Boolean   @default(false)
  priority        String    @default("medium") // low, medium, high
  assignedTo      OrgMember? @relation("TaskAssignments", fields: [assignedToId], references: [id])
  assignedToId    String?   // OrgMember ID
  linkThreadId    String?   // Link to email thread
  lead            Lead?     @relation("LeadTasks", fields: [linkLeadId], references: [id])
  linkLeadId      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PipelineStage {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  name      String
  order     Int
  color     String?  // Hex color for UI
  leads     Lead[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, order])
}

model WebhookSubscription {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  provider  String
  secret    Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeCustomer {
  id            String   @id @default(cuid())
  org           Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String
  customerId    String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id                String         @id @default(cuid())
  org               Org            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId             String
  stripe            StripeCustomer @relation(fields: [stripeCustomerId], references: [id], onDelete: Cascade)
  stripeCustomerId  String
  status            String
  priceId           String
  seats             Int            @default(1)
  trialEndsAt       DateTime?
  currentPeriodEnd  DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  org        Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId      String
  actorId    String?
  action     String   // decrypt_attempt, export, retention_change, admin_action
  purpose    String?
  resource   String?
  success    Boolean
  traceId    String?
  createdAt  DateTime @default(now())
}