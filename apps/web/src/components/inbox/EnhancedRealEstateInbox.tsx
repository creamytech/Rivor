"use client";
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { 
  Mail, Star, Clock, AlertTriangle, CheckCircle, MoreHorizontal, Reply, ReplyAll, 
  Forward, Archive, Trash2, Pin, Snooze, Tag, User, Building, Phone, MapPin, 
  Calendar, MessageSquare, FileText, Eye, EyeOff, Filter, Search, ChevronRight, 
  ChevronLeft, Send, Edit, Plus, Sparkles, Zap, Target, Briefcase, CheckSquare, 
  Home, DollarSign, Users, Bot, Brain, TrendingUp, Bookmark, Bell, Palette, 
  RefreshCw, Settings, X, Copy, ExternalLink, Timer, Calendar2, Clock3, 
  CheckCircle2, XCircle, Lightbulb, MessageCircle, Paperclip, Flag, Gauge, 
  ArrowRight, PlayCircle, PauseCircle, CalendarDays, UserPlus, FileCheck, 
  HandHeart, Handshake, MapPinIcon, CreditCard, Calculator, Building2, Key, 
  Wrench, Percent, Layers, BarChart3, PieChart, Workflow, Merge, GitBranch
} from 'lucide-react';
import { cn } from '@/lib/utils';
import ComposeEmailModal from './ComposeEmailModal';

interface EmailThread {
  id: string;
  subject: string;
  snippet: string;
  participants: Array<{ name: string; email: string }>;
  messageCount: number;
  unread: boolean;
  starred: boolean;
  hasAttachments: boolean;
  labels: string[];
  lastMessageAt: string;
  updatedAt: string;
  // Real estate specific fields
  emailType?: 'buyer_inquiry' | 'seller_lead' | 'showing_request' | 'property_inquiry' | 'referral' | 'vendor' | 'follow_up' | 'market_update' | 'general';
  priority?: 'high' | 'medium' | 'low';
  propertyInfo?: {
    address?: string;
    price?: number;
    propertyType?: string;
    mlsId?: string;
  };
  leadScore?: number;
  clientType?: 'buyer' | 'seller' | 'investor' | 'renter' | 'unknown';
  hasSchedulingRequest?: boolean;
  requiresFollowUp?: boolean;
  sentiment?: 'positive' | 'neutral' | 'negative';
  urgency?: number; // 1-10 scale
  autoGenerated?: boolean;
  aiSummary?: string;
  extractedData?: {
    budget?: { min: number; max: number };
    preferredLocations?: string[];
    propertyTypes?: string[];
    timeline?: string;
    preApproved?: boolean;
  };
}

interface Contact {
  id: string;
  name: string;
  email: string;
  company?: string;
  title?: string;
  phone?: string;
  location?: string;
  avatarUrl?: string;
  intentScore?: number;
  dealHistory?: Array<{
    id: string;
    title: string;
    value: number;
    stage: string;
    status: string;
  }>;
  notes?: string;
  tags: string[];
  lastContact?: string;
  nextFollowUp?: string;
  // Enhanced real estate fields
  clientStatus?: 'active' | 'prospect' | 'qualified' | 'closed' | 'nurturing';
  preferredContactMethod?: 'email' | 'phone' | 'text' | 'app';
  responseRate?: number;
  averageResponseTime?: string;
  totalEmailsSent?: number;
  totalEmailsReceived?: number;
  lastShowingDate?: string;
  propertyPreferences?: {
    priceRange?: { min: number; max: number };
    bedrooms?: number;
    bathrooms?: number;
    propertyTypes?: string[];
    locations?: string[];
    features?: string[];
  };
  financialInfo?: {
    preApprovalAmount?: number;
    preApprovalDate?: string;
    lenderInfo?: string;
    downPayment?: number;
  };
  currentProperties?: Array<{
    id: string;
    address: string;
    interest: 'high' | 'medium' | 'low';
    status: 'watching' | 'scheduled' | 'visited' | 'offer_made' | 'passed';
  }>;
  communication: {
    totalInteractions: number;
    lastResponseTime: string;
    preferredTimes: string[];
    emailEngagement: number;
  };
}

interface SmartAction {
  id: string;
  type: 'schedule_showing' | 'send_property_info' | 'create_lead' | 'follow_up' | 'market_update';
  title: string;
  description: string;
  confidence: number;
  data?: any;
}

interface EnhancedRealEstateInboxProps {
  activeTab?: string;
  searchQuery?: string;
  selectedFilter?: string;
}

export default function EnhancedRealEstateInbox({ 
  activeTab = 'all', 
  searchQuery = '', 
  selectedFilter = '' 
}: EnhancedRealEstateInboxProps) {
  const [threads, setThreads] = useState<EmailThread[]>([]);
  const [selectedThread, setSelectedThread] = useState<EmailThread | null>(null);
  const [contact, setContact] = useState<Contact | null>(null);
  const [showContactPanel, setShowContactPanel] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [viewMode, setViewMode] = useState<'split' | 'thread'>('split');
  const [showFilters, setShowFilters] = useState(false);
  const [selectedThreads, setSelectedThreads] = useState<string[]>([]);
  const [emailFilters, setEmailFilters] = useState({
    emailType: '',
    clientType: '',
    priority: '',
    hasProperty: false,
    requiresFollowUp: false,
    unreadOnly: false,
    dateRange: '',
    leadScore: { min: 0, max: 100 }
  });
  const [sortBy, setSortBy] = useState<'date' | 'priority' | 'leadScore' | 'sender'>('date');
  const [showSmartSuggestions, setShowSmartSuggestions] = useState(true);
  const [aiInsights, setAiInsights] = useState<any>(null);
  const [smartActions, setSmartActions] = useState<SmartAction[]>([]);
  const [showComposeModal, setShowComposeModal] = useState(false);

  // Enhanced utility functions for real estate email management
  const getEmailTypeColor = (type?: string) => {
    switch (type) {
      case 'buyer_inquiry':
        return 'bg-emerald-100 text-emerald-700 border-emerald-200';
      case 'seller_lead':
        return 'bg-blue-100 text-blue-700 border-blue-200';
      case 'showing_request':
        return 'bg-purple-100 text-purple-700 border-purple-200';
      case 'property_inquiry':
        return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'referral':
        return 'bg-pink-100 text-pink-700 border-pink-200';
      case 'vendor':
        return 'bg-gray-100 text-gray-700 border-gray-200';
      case 'follow_up':
        return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'market_update':
        return 'bg-indigo-100 text-indigo-700 border-indigo-200';
      default:
        return 'bg-slate-100 text-slate-700 border-slate-200';
    }
  };

  const getEmailTypeIcon = (type?: string) => {
    switch (type) {
      case 'buyer_inquiry':
        return <Home className="h-3 w-3" />;
      case 'seller_lead':
        return <DollarSign className="h-3 w-3" />;
      case 'showing_request':
        return <Calendar className="h-3 w-3" />;
      case 'property_inquiry':
        return <Building2 className="h-3 w-3" />;
      case 'referral':
        return <Users className="h-3 w-3" />;
      case 'vendor':
        return <Wrench className="h-3 w-3" />;
      case 'follow_up':
        return <Clock className="h-3 w-3" />;
      case 'market_update':
        return <TrendingUp className="h-3 w-3" />;
      default:
        return <Mail className="h-3 w-3" />;
    }
  };

  const getClientTypeColor = (type?: string) => {
    switch (type) {
      case 'buyer':
        return 'bg-green-100 text-green-700';
      case 'seller':
        return 'bg-blue-100 text-blue-700';
      case 'investor':
        return 'bg-purple-100 text-purple-700';
      case 'renter':
        return 'bg-orange-100 text-orange-700';
      default:
        return 'bg-gray-100 text-gray-700';
    }
  };

  const getLeadScoreColor = (score?: number) => {
    if (!score) return 'bg-gray-100 text-gray-600';
    if (score >= 80) return 'bg-red-100 text-red-700 border-red-200';
    if (score >= 60) return 'bg-orange-100 text-orange-700 border-orange-200';
    if (score >= 40) return 'bg-yellow-100 text-yellow-700 border-yellow-200';
    return 'bg-green-100 text-green-700 border-green-200';
  };

  const getSentimentColor = (sentiment?: string) => {
    switch (sentiment) {
      case 'positive':
        return 'bg-green-50 border-l-green-400';
      case 'negative':
        return 'bg-red-50 border-l-red-400';
      default:
        return 'bg-blue-50 border-l-blue-400';
    }
  };

  const formatCurrency = (amount?: number) => {
    if (!amount) return '';
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 1) {
      return 'Just now';
    } else if (diffInHours < 24) {
      return `${Math.floor(diffInHours)}h ago`;
    } else if (diffInHours < 48) {
      return 'Yesterday';
    } else {
      return date.toLocaleDateString();
    }
  };

  const detectEmailInsights = (thread: EmailThread) => {
    const insights = [];
    
    if (thread.leadScore && thread.leadScore > 75) {
      insights.push({ type: 'hot_lead', message: 'High-quality lead detected', icon: '🔥' });
    }
    
    if (thread.hasSchedulingRequest) {
      insights.push({ type: 'scheduling', message: 'Scheduling request detected', icon: '📅' });
    }
    
    if (thread.propertyInfo?.price) {
      insights.push({ 
        type: 'property', 
        message: `Property inquiry: ${formatCurrency(thread.propertyInfo.price)}`,
        icon: '🏠' 
      });
    }
    
    if (thread.urgency && thread.urgency > 7) {
      insights.push({ type: 'urgent', message: 'High urgency detected', icon: '⚡' });
    }
    
    return insights;
  };

  const generateSmartActions = (thread: EmailThread): SmartAction[] => {
    const actions: SmartAction[] = [];
    
    if (thread.hasSchedulingRequest) {
      actions.push({
        id: `schedule-${thread.id}`,
        type: 'schedule_showing',
        title: 'Schedule Property Showing',
        description: 'Auto-detected scheduling request in email',
        confidence: 85,
        data: { threadId: thread.id, propertyInfo: thread.propertyInfo }
      });
    }
    
    if (thread.emailType === 'buyer_inquiry' && thread.leadScore && thread.leadScore > 60) {
      actions.push({
        id: `send-info-${thread.id}`,
        type: 'send_property_info',
        title: 'Send Property Information',
        description: 'Send detailed property information package',
        confidence: 75,
        data: { threadId: thread.id, clientType: thread.clientType }
      });
    }
    
    if (thread.leadScore && thread.leadScore > 70 && !thread.labels.includes('lead')) {
      actions.push({
        id: `create-lead-${thread.id}`,
        type: 'create_lead',
        title: 'Create Lead Entry',
        description: 'Add to CRM pipeline as qualified lead',
        confidence: 80,
        data: { threadId: thread.id, score: thread.leadScore }
      });
    }
    
    return actions;
  };

  // Mock data generation for demonstration
  const generateMockThread = (baseThread: EmailThread, index: number): EmailThread => {
    const emailTypes = ['buyer_inquiry', 'seller_lead', 'showing_request', 'property_inquiry', 'referral'];
    const clientTypes = ['buyer', 'seller', 'investor', 'renter'];
    const priorities = ['high', 'medium', 'low'];
    const sentiments = ['positive', 'neutral', 'negative'];
    
    return {
      ...baseThread,
      emailType: emailTypes[Math.floor(Math.random() * emailTypes.length)] as any,
      priority: priorities[Math.floor(Math.random() * priorities.length)] as any,
      leadScore: Math.floor(Math.random() * 100) + 1,
      clientType: clientTypes[Math.floor(Math.random() * clientTypes.length)] as any,
      hasSchedulingRequest: Math.random() > 0.7,
      requiresFollowUp: Math.random() > 0.6,
      sentiment: sentiments[Math.floor(Math.random() * sentiments.length)] as any,
      urgency: Math.floor(Math.random() * 10) + 1,
      propertyInfo: Math.random() > 0.6 ? {
        address: ['123 Main St', '456 Oak Ave', '789 Pine Rd', '321 Elm Dr', '654 Maple Ln'][Math.floor(Math.random() * 5)],
        price: Math.floor(Math.random() * 800000) + 200000,
        propertyType: ['Single Family', 'Condo', 'Townhouse', 'Multi-Family'][Math.floor(Math.random() * 4)],
        mlsId: `MLS${Math.floor(Math.random() * 999999) + 100000}`
      } : undefined,
      extractedData: Math.random() > 0.5 ? {
        budget: { 
          min: Math.floor(Math.random() * 300000) + 200000, 
          max: Math.floor(Math.random() * 500000) + 500000 
        },
        preferredLocations: ['Downtown', 'Suburbs', 'Waterfront'].slice(0, Math.floor(Math.random() * 3) + 1),
        propertyTypes: ['Single Family', 'Condo'].slice(0, Math.floor(Math.random() * 2) + 1),
        timeline: ['1-3 months', '3-6 months', '6+ months'][Math.floor(Math.random() * 3)],
        preApproved: Math.random() > 0.5
      } : undefined
    };
  };

  useEffect(() => {
    const fetchThreads = async () => {
      try {
        const params = new URLSearchParams();
        if (activeTab !== 'all') params.append('filter', activeTab);
        if (searchQuery) params.append('search', searchQuery);
        if (selectedFilter) params.append('filter', selectedFilter);
        
        const response = await fetch(`/api/inbox/threads?${params.toString()}`);
        if (response.ok) {
          const data = await response.json();
          const enhancedThreads = (data.threads || []).map((thread: EmailThread, index: number) => 
            generateMockThread(thread, index)
          );
          setThreads(enhancedThreads);
        } else {
          setThreads([]);
        }
      } catch (error) {
        console.error('Failed to fetch email threads:', error);
        setThreads([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchThreads();
  }, [activeTab, searchQuery, selectedFilter]);

  useEffect(() => {
    if (selectedThread) {
      const actions = generateSmartActions(selectedThread);
      setSmartActions(actions);
    }
  }, [selectedThread]);

  const handleSmartAction = async (action: SmartAction) => {
    console.log('Executing smart action:', action);
    // Implementation would integrate with calendar, CRM, email templates, etc.
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="flex flex-col items-center gap-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          <p className="text-muted-foreground">Loading your real estate communications...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/20 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
      {/* Enhanced Thread List */}
      <div className={cn(
        "flex flex-col border-r border-border/50 bg-background/50 backdrop-blur-sm",
        viewMode === 'split' ? "w-2/5" : "w-full"
      )}>
        {/* Enhanced Toolbar */}
        <div className="p-4 border-b border-border/50 bg-card/50 backdrop-blur-sm">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center gap-2">
              <h2 className="font-semibold text-lg">Real Estate Inbox</h2>
              <Badge variant="outline" className="text-xs">
                {threads.length} emails
              </Badge>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="sm" onClick={() => setShowFilters(!showFilters)}>
                <Filter className="h-4 w-4" />
              </Button>
              <Button variant="ghost" size="sm">
                <RefreshCw className="h-4 w-4" />
              </Button>
              <ComposeEmailModal
                trigger={
                  <Button size="sm">
                    <Plus className="h-4 w-4 mr-2" />
                    Compose
                  </Button>
                }
              />
            </div>
          </div>
          
          {/* Sort Options */}
          <div className="flex items-center gap-2 text-sm">
            <span className="text-muted-foreground">Sort by:</span>
            <Button
              variant={sortBy === 'date' ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setSortBy('date')}
              className="h-7 text-xs"
            >
              <Clock className="h-3 w-3 mr-1" />
              Date
            </Button>
            <Button
              variant={sortBy === 'priority' ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setSortBy('priority')}
              className="h-7 text-xs"
            >
              <Flag className="h-3 w-3 mr-1" />
              Priority
            </Button>
            <Button
              variant={sortBy === 'leadScore' ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setSortBy('leadScore')}
              className="h-7 text-xs"
            >
              <Target className="h-3 w-3 mr-1" />
              Lead Score
            </Button>
          </div>
          
          {/* Quick Stats */}
          <div className="flex items-center gap-4 mt-3 p-3 bg-muted/50 rounded-lg">
            <div className="flex items-center gap-2 text-sm">
              <div className="w-2 h-2 bg-red-500 rounded-full"></div>
              <span className="text-xs text-muted-foreground">Hot Leads: {threads.filter(t => t.leadScore && t.leadScore > 75).length}</span>
            </div>
            <div className="flex items-center gap-2 text-sm">
              <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
              <span className="text-xs text-muted-foreground">Follow-ups: {threads.filter(t => t.requiresFollowUp).length}</span>
            </div>
            <div className="flex items-center gap-2 text-sm">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span className="text-xs text-muted-foreground">Showings: {threads.filter(t => t.hasSchedulingRequest).length}</span>
            </div>
          </div>
        </div>

        {/* Enhanced Thread List */}
        <div className="flex-1 overflow-y-auto">
          {threads.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-full text-center p-8">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-full flex items-center justify-center mb-4">
                <Mail className="h-10 w-10 text-blue-500" />
              </div>
              <h3 className="text-xl font-semibold text-foreground mb-2">
                No emails found
              </h3>
              <p className="text-muted-foreground mb-6 max-w-sm">
                {searchQuery ? 'Try adjusting your search terms or filters' : 'Connect your email account to start managing your real estate communications'}
              </p>
              <div className="flex gap-2">
                <Button>
                  <Plus className="h-4 w-4 mr-2" />
                  Connect Email
                </Button>
                <Button variant="outline">
                  <Bot className="h-4 w-4 mr-2" />
                  Import Demo Data
                </Button>
              </div>
            </div>
          ) : (
            <div className="divide-y divide-border/50">
              {threads.map((thread, index) => {
                const insights = detectEmailInsights(thread);
                
                return (
                  <motion.div
                    key={thread.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className={cn(
                      "p-4 cursor-pointer transition-all duration-200 hover:bg-muted/50 group border-l-4",
                      selectedThread?.id === thread.id && "bg-blue-50 dark:bg-blue-900/20 border-r-2 border-r-blue-500",
                      getSentimentColor(thread.sentiment),
                      thread.unread && "bg-background border-l-blue-500",
                      !thread.unread && "border-l-transparent"
                    )}
                    onClick={() => setSelectedThread(thread)}
                  >
                    <div className="flex items-start gap-3">
                      {/* Enhanced Avatar with Status */}
                      <div className="relative flex-shrink-0">
                        <Avatar className="h-12 w-12 ring-2 ring-border/50">
                          <AvatarImage src={thread.participants[0]?.email ? `/api/avatar/${thread.participants[0].email}` : undefined} />
                          <AvatarFallback className={cn(
                            "font-semibold",
                            getClientTypeColor(thread.clientType)
                          )}>
                            {thread.participants[0]?.name?.charAt(0) || 'E'}
                          </AvatarFallback>
                        </Avatar>
                        {thread.leadScore && thread.leadScore > 75 && (
                          <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
                            <span className="text-xs text-white font-bold">!</span>
                          </div>
                        )}
                      </div>

                      {/* Enhanced Content */}
                      <div className="flex-1 min-w-0">
                        {/* Header with Email Type */}
                        <div className="flex items-center gap-2 mb-2">
                          <div className="flex items-center gap-1">
                            {getEmailTypeIcon(thread.emailType)}
                            <Badge variant="outline" className={cn("text-xs border", getEmailTypeColor(thread.emailType))}>
                              {thread.emailType?.replace('_', ' ') || 'general'}
                            </Badge>
                          </div>
                          {thread.priority === 'high' && (
                            <Badge variant="destructive" className="text-xs">
                              <AlertTriangle className="h-3 w-3 mr-1" />
                              High Priority
                            </Badge>
                          )}
                          {thread.leadScore && (
                            <Badge variant="outline" className={cn("text-xs border", getLeadScoreColor(thread.leadScore))}>
                              {thread.leadScore}% Lead Score
                            </Badge>
                          )}
                        </div>

                        {/* Subject and Status */}
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className={cn(
                            "font-medium text-base truncate",
                            thread.unread && "font-semibold text-foreground",
                            !thread.unread && "text-muted-foreground"
                          )}>
                            {thread.subject || 'No Subject'}
                          </h3>
                          <div className="flex items-center gap-1">
                            {thread.starred && (
                              <Star className="h-4 w-4 text-yellow-500 fill-current" />
                            )}
                            {thread.hasAttachments && (
                              <Paperclip className="h-4 w-4 text-muted-foreground" />
                            )}
                            {thread.hasSchedulingRequest && (
                              <Calendar className="h-4 w-4 text-blue-500" />
                            )}
                            {thread.requiresFollowUp && (
                              <Bell className="h-4 w-4 text-orange-500" />
                            )}
                          </div>
                        </div>

                        {/* Property Info */}
                        {thread.propertyInfo && (
                          <div className="flex items-center gap-2 mb-2 p-2 bg-muted/30 rounded-md">
                            <Building2 className="h-4 w-4 text-blue-500" />
                            <span className="text-sm font-medium">{thread.propertyInfo.address}</span>
                            <span className="text-sm text-green-600 font-semibold">
                              {formatCurrency(thread.propertyInfo.price)}
                            </span>
                            <Badge variant="outline" className="text-xs">
                              {thread.propertyInfo.propertyType}
                            </Badge>
                          </div>
                        )}

                        {/* Email Snippet */}
                        <p className="text-sm text-muted-foreground mb-3 line-clamp-2 leading-relaxed">
                          {thread.snippet}
                        </p>

                        {/* Enhanced Metadata */}
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2 text-xs text-muted-foreground">
                            <span className="font-medium">{thread.participants[0]?.name || thread.participants[0]?.email || 'Unknown'}</span>
                            <span>•</span>
                            <span>{formatTime(thread.lastMessageAt)}</span>
                            {thread.messageCount > 1 && (
                              <>
                                <span>•</span>
                                <MessageCircle className="h-3 w-3" />
                                <span>{thread.messageCount}</span>
                              </>
                            )}
                          </div>
                          
                          {/* Urgency Indicator */}
                          {thread.urgency && thread.urgency > 7 && (
                            <div className="flex items-center gap-1">
                              <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                              <span className="text-xs text-red-600 font-medium">Urgent</span>
                            </div>
                          )}
                        </div>

                        {/* AI Insights */}
                        {insights.length > 0 && (
                          <div className="flex items-center gap-1 mt-2">
                            {insights.slice(0, 2).map((insight, idx) => (
                              <Badge key={idx} variant="secondary" className="text-xs bg-blue-50 text-blue-700">
                                <Brain className="h-3 w-3 mr-1" />
                                {insight.message}
                              </Badge>
                            ))}
                          </div>
                        )}

                        {/* Enhanced Labels */}
                        {thread.labels.length > 0 && (
                          <div className="flex items-center gap-1 mt-2">
                            {thread.labels.slice(0, 3).map((label) => (
                              <Badge key={label} variant="outline" className="text-xs">
                                {label}
                              </Badge>
                            ))}
                            {thread.labels.length > 3 && (
                              <Badge variant="outline" className="text-xs">
                                +{thread.labels.length - 3}
                              </Badge>
                            )}
                          </div>
                        )}
                      </div>

                      {/* Enhanced Actions */}
                      <div className="flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity">
                        <div className="flex flex-col gap-1">
                          <Button variant="ghost" size="sm" className="h-8 w-8 p-0" title="More options">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                          {thread.hasSchedulingRequest && (
                            <Button variant="ghost" size="sm" className="h-8 w-8 p-0" title="Schedule showing">
                              <Calendar className="h-4 w-4 text-blue-500" />
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </div>
          )}
        </div>
      </div>

      {/* Enhanced Thread Panel */}
      {viewMode === 'split' && selectedThread && (
        <div className="flex-1 flex flex-col bg-background/50 backdrop-blur-sm">
          {/* Enhanced Thread Header */}
          <div className="p-6 border-b border-border/50 bg-card/50">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <h3 className="text-xl font-semibold">{selectedThread.subject || 'No Subject'}</h3>
                {selectedThread.emailType && (
                  <Badge variant="outline" className={cn("text-sm", getEmailTypeColor(selectedThread.emailType))}>
                    {getEmailTypeIcon(selectedThread.emailType)}
                    <span className="ml-1">{selectedThread.emailType.replace('_', ' ')}</span>
                  </Badge>
                )}
              </div>
              <div className="flex items-center gap-2">
                <Button variant="ghost" size="sm">
                  <Reply className="h-4 w-4" />
                  Reply
                </Button>
                <Button variant="ghost" size="sm">
                  <ReplyAll className="h-4 w-4" />
                  Reply All
                </Button>
                <Button variant="ghost" size="sm">
                  <Forward className="h-4 w-4" />
                  Forward
                </Button>
                <Button variant="ghost" size="sm">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Enhanced Email Meta */}
            <div className="flex items-center gap-6 text-sm text-muted-foreground mb-4">
              <div className="flex items-center gap-2">
                <span>From:</span>
                <span className="font-medium">
                  {selectedThread.participants[0]?.name || selectedThread.participants[0]?.email || 'Unknown'}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4" />
                <span>{formatTime(selectedThread.lastMessageAt)}</span>
              </div>
              {selectedThread.leadScore && (
                <div className="flex items-center gap-2">
                  <Target className="h-4 w-4" />
                  <span>Lead Score: {selectedThread.leadScore}%</span>
                </div>
              )}
            </div>

            {/* Smart Actions */}
            {smartActions.length > 0 && (
              <div className="flex items-center gap-2 mb-4">
                <span className="text-sm font-medium">Smart Actions:</span>
                {smartActions.map((action) => (
                  <Button 
                    key={action.id}
                    variant="outline" 
                    size="sm"
                    onClick={() => handleSmartAction(action)}
                    className="text-xs"
                  >
                    <Zap className="h-3 w-3 mr-1" />
                    {action.title}
                    <Badge variant="secondary" className="ml-1 text-xs">
                      {action.confidence}%
                    </Badge>
                  </Button>
                ))}
              </div>
            )}
          </div>

          {/* Enhanced Thread Content */}
          <div className="flex-1 overflow-y-auto p-6">
            <div className="prose prose-sm max-w-none">
              <p className="text-foreground leading-relaxed">
                {selectedThread.snippet}
              </p>
              <p className="text-muted-foreground text-sm mt-4">
                This is a preview of the email content. The full message would be displayed here with proper formatting.
              </p>
            </div>

            {/* Enhanced AI Summary Card */}
            <Card className="mt-6 border-blue-200 bg-blue-50/50 dark:bg-blue-950/20">
              <CardHeader className="pb-3">
                <CardTitle className="flex items-center gap-2 text-base">
                  <Brain className="h-5 w-5 text-blue-500" />
                  AI Intelligence & Insights
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Email Analysis */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <h4 className="font-medium text-sm">Email Analysis</h4>
                    <div className="flex flex-wrap gap-2">
                      <Badge variant="outline" className={cn("text-xs", getLeadScoreColor(selectedThread.leadScore))}>
                        Lead Score: {selectedThread.leadScore}%
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {selectedThread.sentiment} sentiment
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        Priority: {selectedThread.priority}
                      </Badge>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <h4 className="font-medium text-sm">Detected Intent</h4>
                    <div className="flex flex-wrap gap-2">
                      {selectedThread.hasSchedulingRequest && (
                        <Badge className="text-xs bg-green-100 text-green-700">
                          <Calendar className="h-3 w-3 mr-1" />
                          Scheduling Request
                        </Badge>
                      )}
                      {selectedThread.propertyInfo && (
                        <Badge className="text-xs bg-blue-100 text-blue-700">
                          <Building2 className="h-3 w-3 mr-1" />
                          Property Inquiry
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>

                {/* Property Information */}
                {selectedThread.propertyInfo && (
                  <div className="p-3 bg-background/50 rounded-lg border">
                    <h4 className="font-medium text-sm mb-2">Property Details</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div><strong>Address:</strong> {selectedThread.propertyInfo.address}</div>
                      <div><strong>Price:</strong> {formatCurrency(selectedThread.propertyInfo.price)}</div>
                      <div><strong>Type:</strong> {selectedThread.propertyInfo.propertyType}</div>
                      {selectedThread.propertyInfo.mlsId && (
                        <div><strong>MLS ID:</strong> {selectedThread.propertyInfo.mlsId}</div>
                      )}
                    </div>
                  </div>
                )}

                {/* Extracted Client Data */}
                {selectedThread.extractedData && (
                  <div className="p-3 bg-background/50 rounded-lg border">
                    <h4 className="font-medium text-sm mb-2">Client Preferences</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      {selectedThread.extractedData.budget && (
                        <div>
                          <strong>Budget:</strong> {formatCurrency(selectedThread.extractedData.budget.min)} - {formatCurrency(selectedThread.extractedData.budget.max)}
                        </div>
                      )}
                      {selectedThread.extractedData.timeline && (
                        <div><strong>Timeline:</strong> {selectedThread.extractedData.timeline}</div>
                      )}
                      {selectedThread.extractedData.propertyTypes && (
                        <div><strong>Property Types:</strong> {selectedThread.extractedData.propertyTypes.join(', ')}</div>
                      )}
                      {selectedThread.extractedData.preferredLocations && (
                        <div><strong>Locations:</strong> {selectedThread.extractedData.preferredLocations.join(', ')}</div>
                      )}
                    </div>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex items-center gap-2 pt-2">
                  <Button size="sm" variant="outline">
                    <Target className="h-4 w-4 mr-2" />
                    Create Lead
                  </Button>
                  <Button size="sm" variant="outline">
                    <Calendar className="h-4 w-4 mr-2" />
                    Schedule Showing
                  </Button>
                  <Button size="sm" variant="outline">
                    <CheckSquare className="h-4 w-4 mr-2" />
                    Create Task
                  </Button>
                  <Button size="sm" variant="outline">
                    <Building2 className="h-4 w-4 mr-2" />
                    Send Property Info
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      )}

      {/* Enhanced Contact Panel */}
      {viewMode === 'split' && showContactPanel && contact && (
        <div className="w-80 border-l border-border/50 bg-muted/30 backdrop-blur-sm">
          <div className="p-4 border-b border-border/50">
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-semibold">Contact Intelligence</h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowContactPanel(false)}
              >
                <EyeOff className="h-4 w-4" />
              </Button>
            </div>
          </div>

          <div className="p-4 space-y-4">
            {/* Enhanced Contact Info */}
            <div className="flex items-center gap-3">
              <Avatar className="h-12 w-12">
                <AvatarImage src={contact.avatarUrl} />
                <AvatarFallback className={cn("font-semibold", getClientTypeColor(selectedThread?.clientType))}>
                  {contact.name.charAt(0)}
                </AvatarFallback>
              </Avatar>
              <div>
                <h4 className="font-medium">{contact.name}</h4>
                <p className="text-sm text-muted-foreground">{contact.email}</p>
                {selectedThread?.clientType && (
                  <Badge variant="outline" className={cn("text-xs mt-1", getClientTypeColor(selectedThread.clientType))}>
                    {selectedThread.clientType}
                  </Badge>
                )}
              </div>
            </div>

            {/* Communication Stats */}
            <div className="grid grid-cols-2 gap-3">
              <div className="text-center p-2 bg-background/50 rounded-lg">
                <div className="text-lg font-semibold">87%</div>
                <div className="text-xs text-muted-foreground">Response Rate</div>
              </div>
              <div className="text-center p-2 bg-background/50 rounded-lg">
                <div className="text-lg font-semibold">2.5h</div>
                <div className="text-xs text-muted-foreground">Avg Response</div>
              </div>
            </div>

            {/* Client Preferences */}
            {selectedThread?.extractedData && (
              <div>
                <h5 className="text-sm font-medium mb-2">Preferences</h5>
                <div className="space-y-2 text-sm">
                  {selectedThread.extractedData.budget && (
                    <div className="flex justify-between">
                      <span>Budget:</span>
                      <span className="font-medium">
                        {formatCurrency(selectedThread.extractedData.budget.min)} - {formatCurrency(selectedThread.extractedData.budget.max)}
                      </span>
                    </div>
                  )}
                  {selectedThread.extractedData.timeline && (
                    <div className="flex justify-between">
                      <span>Timeline:</span>
                      <span className="font-medium">{selectedThread.extractedData.timeline}</span>
                    </div>
                  )}
                  {selectedThread.extractedData.preApproved !== undefined && (
                    <div className="flex justify-between">
                      <span>Pre-approved:</span>
                      <Badge variant={selectedThread.extractedData.preApproved ? "default" : "secondary"} className="text-xs">
                        {selectedThread.extractedData.preApproved ? "Yes" : "No"}
                      </Badge>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Quick Actions */}
            <div className="space-y-2">
              <h5 className="text-sm font-medium">Quick Actions</h5>
              <div className="grid grid-cols-1 gap-2">
                <Button size="sm" className="w-full justify-start text-xs">
                  <Mail className="h-3 w-3 mr-2" />
                  Send Follow-up
                </Button>
                <Button size="sm" variant="outline" className="w-full justify-start text-xs">
                  <Calendar className="h-3 w-3 mr-2" />
                  Schedule Showing
                </Button>
                <Button size="sm" variant="outline" className="w-full justify-start text-xs">
                  <Building2 className="h-3 w-3 mr-2" />
                  Send Properties
                </Button>
                <Button size="sm" variant="outline" className="w-full justify-start text-xs">
                  <Target className="h-3 w-3 mr-2" />
                  Add to Pipeline
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}