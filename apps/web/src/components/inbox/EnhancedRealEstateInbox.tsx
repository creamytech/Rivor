"use client";
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { 
  Mail, Star, Clock, AlertTriangle, CheckCircle, MoreHorizontal, Reply, ReplyAll, 
  Forward, Archive, Trash2, Pin, Snooze, Tag, User, Building, Phone, MapPin, 
  Calendar, MessageSquare, FileText, Eye, EyeOff, Filter, Search, ChevronRight, 
  ChevronLeft, Send, Edit, Plus, Sparkles, Zap, Target, Briefcase, CheckSquare, 
  Home, DollarSign, Users, Bot, Brain, TrendingUp, Bookmark, Bell, Palette, 
  RefreshCw, Settings, X, Copy, ExternalLink, Timer, Calendar2, Clock3, 
  CheckCircle2, XCircle, Lightbulb, MessageCircle, Paperclip, Flag, Gauge, 
  ArrowRight, PlayCircle, PauseCircle, CalendarDays, UserPlus, FileCheck, 
  HandHeart, Handshake, MapPinIcon, CreditCard, Calculator, Building2, Key, 
  Wrench, Percent, Layers, BarChart3, PieChart, Workflow, Merge, GitBranch, 
  Heart
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface EmailThread {
  id: string;
  subject: string;
  snippet: string;
  participants: Array<{ name: string; email: string }>;
  messageCount: number;
  unread: boolean;
  starred: boolean;
  hasAttachments: boolean;
  labels: string[];
  lastMessageAt: string;
  updatedAt: string;
  // Real estate specific fields
  emailType?: 'buyer_inquiry' | 'seller_lead' | 'showing_request' | 'property_inquiry' | 'referral' | 'vendor' | 'follow_up' | 'market_update' | 'general';
  priority?: 'high' | 'medium' | 'low';
  propertyInfo?: {
    address?: string;
    price?: number;
    propertyType?: string;
    mlsId?: string;
  };
  leadScore?: number;
  clientType?: 'buyer' | 'seller' | 'investor' | 'renter' | 'unknown';
  hasSchedulingRequest?: boolean;
  requiresFollowUp?: boolean;
  sentiment?: 'positive' | 'neutral' | 'negative';
  urgency?: number; // 1-10 scale
  autoGenerated?: boolean;
  aiSummary?: string;
  extractedData?: {
    budget?: { min: number; max: number };
    preferredLocations?: string[];
    propertyTypes?: string[];
    timeline?: string;
    preApproved?: boolean;
  };
}

interface Contact {
  id: string;
  name: string;
  email: string;
  company?: string;
  title?: string;
  phone?: string;
  location?: string;
  avatarUrl?: string;
  intentScore?: number;
  dealHistory?: Array<{
    id: string;
    title: string;
    value: number;
    stage: string;
    status: string;
  }>;
  notes?: string;
  tags: string[];
  lastContact?: string;
  nextFollowUp?: string;
  // Enhanced real estate fields
  clientStatus?: 'active' | 'prospect' | 'qualified' | 'closed' | 'nurturing';
  preferredContactMethod?: 'email' | 'phone' | 'text' | 'app';
  responseRate?: number;
  averageResponseTime?: string;
  totalEmailsSent?: number;
  totalEmailsReceived?: number;
  lastShowingDate?: string;
  propertyPreferences?: {
    priceRange?: { min: number; max: number };
    bedrooms?: number;
    bathrooms?: number;
    propertyTypes?: string[];
    locations?: string[];
    features?: string[];
  };
  financialInfo?: {
    preApprovalAmount?: number;
    preApprovalDate?: string;
    lenderInfo?: string;
    downPayment?: number;
  };
  currentProperties?: Array<{
    id: string;
    address: string;
    interest: 'high' | 'medium' | 'low';
    status: 'watching' | 'scheduled' | 'visited' | 'offer_made' | 'passed';
  }>;
  communication: {
    totalInteractions: number;
    lastResponseTime: string;
    preferredTimes: string[];
    emailEngagement: number;
  };
}

interface SmartAction {
  id: string;
  type: 'schedule_showing' | 'send_property_info' | 'create_lead' | 'follow_up' | 'market_update';
  title: string;
  description: string;
  confidence: number;
  data?: any;
}

interface EnhancedRealEstateInboxProps {
  activeTab?: string;
  searchQuery?: string;
  selectedFilter?: string;
  sortBy?: 'date' | 'priority' | 'lead_score';
}

export default function EnhancedRealEstateInbox({ 
  activeTab = 'all', 
  searchQuery = '', 
  selectedFilter = '',
  sortBy = 'date'
}: EnhancedRealEstateInboxProps) {
  const [threads, setThreads] = useState<EmailThread[]>([]);
  const [selectedThread, setSelectedThread] = useState<EmailThread | null>(null);
  const [contact, setContact] = useState<Contact | null>(null);
  const [showContactPanel, setShowContactPanel] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [viewMode, setViewMode] = useState<'split' | 'thread'>('split');
  const [showFilters, setShowFilters] = useState(false);
  const [selectedThreads, setSelectedThreads] = useState<string[]>([]);
  const [emailFilters, setEmailFilters] = useState({
    emailType: '',
    clientType: '',
    priority: '',
    hasProperty: false,
    requiresFollowUp: false,
    unreadOnly: false,
    dateRange: '',
    leadScore: { min: 0, max: 100 }
  });
  const [showSmartSuggestions, setShowSmartSuggestions] = useState(true);
  const [aiInsights, setAiInsights] = useState<any>(null);
  const [smartActions, setSmartActions] = useState<SmartAction[]>([]);
  const [showComposeModal, setShowComposeModal] = useState(false);

  // Enhanced utility functions for real estate email management
  const getEmailTypeColor = (type?: string) => {
    switch (type) {
      case 'buyer_inquiry':
        return 'bg-emerald-100 text-emerald-700 border-emerald-200';
      case 'seller_lead':
        return 'bg-blue-100 text-blue-700 border-blue-200';
      case 'showing_request':
        return 'bg-purple-100 text-purple-700 border-purple-200';
      case 'property_inquiry':
        return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'referral':
        return 'bg-pink-100 text-pink-700 border-pink-200';
      case 'vendor':
        return 'bg-gray-100 text-gray-700 border-gray-200';
      case 'follow_up':
        return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'market_update':
        return 'bg-indigo-100 text-indigo-700 border-indigo-200';
      default:
        return 'bg-slate-100 text-slate-700 border-slate-200';
    }
  };

  const getEmailTypeIcon = (type?: string) => {
    switch (type) {
      case 'buyer_inquiry':
        return <Home className="h-3 w-3" />;
      case 'seller_lead':
        return <DollarSign className="h-3 w-3" />;
      case 'showing_request':
        return <Calendar className="h-3 w-3" />;
      case 'property_inquiry':
        return <Building2 className="h-3 w-3" />;
      case 'referral':
        return <Users className="h-3 w-3" />;
      case 'vendor':
        return <Wrench className="h-3 w-3" />;
      case 'follow_up':
        return <Clock className="h-3 w-3" />;
      case 'market_update':
        return <TrendingUp className="h-3 w-3" />;
      default:
        return <Mail className="h-3 w-3" />;
    }
  };

  const getClientTypeColor = (type?: string) => {
    switch (type) {
      case 'buyer':
        return 'bg-green-100 text-green-700';
      case 'seller':
        return 'bg-blue-100 text-blue-700';
      case 'investor':
        return 'bg-purple-100 text-purple-700';
      case 'renter':
        return 'bg-orange-100 text-orange-700';
      default:
        return 'bg-gray-100 text-gray-700';
    }
  };

  const getLeadScoreColor = (score?: number) => {
    if (!score) return 'bg-gray-100 text-gray-600';
    if (score >= 80) return 'bg-red-100 text-red-700 border-red-200';
    if (score >= 60) return 'bg-orange-100 text-orange-700 border-orange-200';
    if (score >= 40) return 'bg-yellow-100 text-yellow-700 border-yellow-200';
    return 'bg-green-100 text-green-700 border-green-200';
  };

  const getSentimentColor = (sentiment?: string) => {
    switch (sentiment) {
      case 'positive':
        return 'bg-green-50 border-l-green-400';
      case 'negative':
        return 'bg-red-50 border-l-red-400';
      default:
        return 'bg-blue-50 border-l-blue-400';
    }
  };

  const formatCurrency = (amount?: number) => {
    if (!amount) return '';
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 1) {
      return 'Just now';
    } else if (diffInHours < 24) {
      return `${Math.floor(diffInHours)}h ago`;
    } else if (diffInHours < 48) {
      return 'Yesterday';
    } else {
      return date.toLocaleDateString();
    }
  };

  const detectEmailInsights = (thread: EmailThread) => {
    const insights = [];
    
    if (thread.leadScore && thread.leadScore > 75) {
      insights.push({ type: 'hot_lead', message: 'High-quality lead detected', icon: '🔥' });
    }
    
    if (thread.hasSchedulingRequest) {
      insights.push({ type: 'scheduling', message: 'Scheduling request detected', icon: '📅' });
    }
    
    if (thread.propertyInfo?.price) {
      insights.push({ 
        type: 'property', 
        message: `Property inquiry: ${formatCurrency(thread.propertyInfo.price)}`,
        icon: '🏠' 
      });
    }
    
    if (thread.urgency && thread.urgency > 7) {
      insights.push({ type: 'urgent', message: 'High urgency detected', icon: '⚡' });
    }
    
    return insights;
  };

  const generateSmartActions = (thread: EmailThread): SmartAction[] => {
    const actions: SmartAction[] = [];
    
    if (thread.hasSchedulingRequest) {
      actions.push({
        id: `schedule-${thread.id}`,
        type: 'schedule_showing',
        title: 'Schedule Property Showing',
        description: 'Auto-detected scheduling request in email',
        confidence: 85,
        data: { threadId: thread.id, propertyInfo: thread.propertyInfo }
      });
    }
    
    if (thread.emailType === 'buyer_inquiry' && thread.leadScore && thread.leadScore > 60) {
      actions.push({
        id: `send-info-${thread.id}`,
        type: 'send_property_info',
        title: 'Send Property Information',
        description: 'Send detailed property information package',
        confidence: 75,
        data: { threadId: thread.id, clientType: thread.clientType }
      });
    }
    
    if (thread.leadScore && thread.leadScore > 70 && !thread.labels.includes('lead')) {
      actions.push({
        id: `create-lead-${thread.id}`,
        type: 'create_lead',
        title: 'Create Lead Entry',
        description: 'Add to CRM pipeline as qualified lead',
        confidence: 80,
        data: { threadId: thread.id, score: thread.leadScore }
      });
    }
    
    return actions;
  };

  // Mock data generation for demonstration
  const generateMockThread = (baseThread: EmailThread, index: number): EmailThread => {
    const emailTypes = ['buyer_inquiry', 'seller_lead', 'showing_request', 'property_inquiry', 'referral'];
    const clientTypes = ['buyer', 'seller', 'investor', 'renter'];
    const priorities = ['high', 'medium', 'low'];
    const sentiments = ['positive', 'neutral', 'negative'];
    
    return {
      ...baseThread,
      emailType: emailTypes[Math.floor(Math.random() * emailTypes.length)] as any,
      priority: priorities[Math.floor(Math.random() * priorities.length)] as any,
      leadScore: Math.floor(Math.random() * 100) + 1,
      clientType: clientTypes[Math.floor(Math.random() * clientTypes.length)] as any,
      hasSchedulingRequest: Math.random() > 0.7,
      requiresFollowUp: Math.random() > 0.6,
      sentiment: sentiments[Math.floor(Math.random() * sentiments.length)] as any,
      urgency: Math.floor(Math.random() * 10) + 1,
      propertyInfo: Math.random() > 0.6 ? {
        address: ['123 Main St', '456 Oak Ave', '789 Pine Rd', '321 Elm Dr', '654 Maple Ln'][Math.floor(Math.random() * 5)],
        price: Math.floor(Math.random() * 800000) + 200000,
        propertyType: ['Single Family', 'Condo', 'Townhouse', 'Multi-Family'][Math.floor(Math.random() * 4)],
        mlsId: `MLS${Math.floor(Math.random() * 999999) + 100000}`
      } : undefined,
      extractedData: Math.random() > 0.5 ? {
        budget: { 
          min: Math.floor(Math.random() * 300000) + 200000, 
          max: Math.floor(Math.random() * 500000) + 500000 
        },
        preferredLocations: ['Downtown', 'Suburbs', 'Waterfront'].slice(0, Math.floor(Math.random() * 3) + 1),
        propertyTypes: ['Single Family', 'Condo'].slice(0, Math.floor(Math.random() * 2) + 1),
        timeline: ['1-3 months', '3-6 months', '6+ months'][Math.floor(Math.random() * 3)],
        preApproved: Math.random() > 0.5
      } : undefined
    };
  };

  useEffect(() => {
    const fetchThreads = async () => {
      try {
        const params = new URLSearchParams();
        if (activeTab !== 'all') params.append('filter', activeTab);
        if (searchQuery) params.append('search', searchQuery);
        if (selectedFilter) params.append('filter', selectedFilter);
        
        const response = await fetch(`/api/inbox/threads?${params.toString()}`);
        if (response.ok) {
          const data = await response.json();
          const enhancedThreads = (data.threads || []).map((thread: EmailThread, index: number) => 
            generateMockThread(thread, index)
          );
          setThreads(enhancedThreads);
        } else {
          setThreads([]);
        }
      } catch (error) {
        console.error('Failed to fetch email threads:', error);
        setThreads([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchThreads();
  }, [activeTab, searchQuery, selectedFilter]);

  useEffect(() => {
    if (selectedThread) {
      const actions = generateSmartActions(selectedThread);
      setSmartActions(actions);
    }
  }, [selectedThread]);

  const handleSmartAction = async (action: SmartAction) => {
    console.log('Executing smart action:', action);
    // Implementation would integrate with calendar, CRM, email templates, etc.
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="flex flex-col items-center gap-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          <p className="text-muted-foreground">Loading your real estate communications...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col lg:flex-row bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/20 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
      {/* Enhanced Thread List */}
      <div className={cn(
        "flex flex-col border-r border-border/30 bg-background/60 backdrop-blur-md shadow-sm",
        viewMode === 'split' ? "w-full lg:w-2/5 lg:min-w-[480px]" : "w-full",
        selectedThread && viewMode === 'split' && "hidden lg:flex"
      )}>
        {/* Enhanced Toolbar */}
        <div className="p-6 border-b border-border/30 bg-gradient-to-r from-background/90 to-background/60 backdrop-blur-md">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                  <Mail className="h-5 w-5 text-white" />
                </div>
                <div>
                  <h2 className="font-bold text-xl text-foreground">Conversations</h2>
                  <p className="text-sm text-muted-foreground">Manage your real estate communications</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Badge variant="secondary" className="text-sm px-4 py-2 bg-blue-50 text-blue-700 border border-blue-200">
                  {threads.length} total
                </Badge>
                <Badge variant="secondary" className="text-sm px-4 py-2 bg-red-50 text-red-700 border border-red-200">
                  {threads.filter(t => t.unread).length} unread
                </Badge>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={() => setShowFilters(!showFilters)} className="h-10 px-4">
                <Filter className="h-4 w-4 mr-2" />
                Filters
              </Button>
              <Button variant="outline" size="sm" className="h-10 px-4">
                <RefreshCw className="h-4 w-4 mr-2" />
                Sync
              </Button>
              <Button size="sm" className="h-10 px-4 bg-blue-600 hover:bg-blue-700">
                <Plus className="h-4 w-4 mr-2" />
                Compose
              </Button>
            </div>
          </div>
          
          {/* Enhanced Quick Stats Dashboard */}
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 lg:gap-4">
            <div className="relative overflow-hidden rounded-2xl bg-gradient-to-br from-red-500/10 to-red-600/5 border border-red-200/50 p-4 group hover:shadow-lg transition-all duration-300">
              <div className="absolute top-2 right-2 w-8 h-8 bg-red-500/20 rounded-full flex items-center justify-center">
                <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
              </div>
              <div className="space-y-1">
                <div className="text-2xl font-bold text-red-700 dark:text-red-400">{threads.filter(t => t.leadScore && t.leadScore > 75).length}</div>
                <div className="text-sm font-medium text-red-600/80 dark:text-red-400/80">Hot Leads</div>
                <div className="text-xs text-red-500/60">Score 75%+</div>
              </div>
            </div>
            <div className="relative overflow-hidden rounded-2xl bg-gradient-to-br from-orange-500/10 to-orange-600/5 border border-orange-200/50 p-4 group hover:shadow-lg transition-all duration-300">
              <div className="absolute top-2 right-2 w-8 h-8 bg-orange-500/20 rounded-full flex items-center justify-center">
                <Clock className="w-4 h-4 text-orange-600"></Clock>
              </div>
              <div className="space-y-1">
                <div className="text-2xl font-bold text-orange-700 dark:text-orange-400">{threads.filter(t => t.requiresFollowUp).length}</div>
                <div className="text-sm font-medium text-orange-600/80 dark:text-orange-400/80">Follow-ups</div>
                <div className="text-xs text-orange-500/60">Action needed</div>
              </div>
            </div>
            <div className="relative overflow-hidden rounded-2xl bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-200/50 p-4 group hover:shadow-lg transition-all duration-300">
              <div className="absolute top-2 right-2 w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center">
                <Calendar className="w-4 h-4 text-green-600"></Calendar>
              </div>
              <div className="space-y-1">
                <div className="text-2xl font-bold text-green-700 dark:text-green-400">{threads.filter(t => t.hasSchedulingRequest).length}</div>
                <div className="text-sm font-medium text-green-600/80 dark:text-green-400/80">Showings</div>
                <div className="text-xs text-green-500/60">Ready to schedule</div>
              </div>
            </div>
            <div className="relative overflow-hidden rounded-2xl bg-gradient-to-br from-blue-500/10 to-blue-600/5 border border-blue-200/50 p-4 group hover:shadow-lg transition-all duration-300">
              <div className="absolute top-2 right-2 w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center">
                <Building2 className="w-4 h-4 text-blue-600"></Building2>
              </div>
              <div className="space-y-1">
                <div className="text-2xl font-bold text-blue-700 dark:text-blue-400">{threads.filter(t => t.propertyInfo).length}</div>
                <div className="text-sm font-medium text-blue-600/80 dark:text-blue-400/80">Properties</div>
                <div className="text-xs text-blue-500/60">Referenced</div>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced Thread List */}
        <div className="flex-1 overflow-y-auto bg-gradient-to-b from-transparent to-muted/10">
          {threads.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-full text-center p-12">
              <div className="w-24 h-24 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-2xl flex items-center justify-center mb-6 shadow-lg">
                <Mail className="h-12 w-12 text-blue-500" />
              </div>
              <h3 className="text-2xl font-bold text-foreground mb-3">
                No emails found
              </h3>
              <p className="text-muted-foreground mb-8 max-w-md text-lg leading-relaxed">
                {searchQuery ? 'Try adjusting your search terms or filters to find what you\'re looking for' : 'Connect your email account to start managing your real estate communications with AI-powered insights'}
              </p>
              <div className="flex flex-col sm:flex-row gap-3">
                <Button size="lg" className="px-6">
                  <Plus className="h-5 w-5 mr-2" />
                  Connect Email Account
                </Button>
                <Button variant="outline" size="lg" className="px-6">
                  <Bot className="h-5 w-5 mr-2" />
                  Load Demo Data
                </Button>
              </div>
            </div>
          ) : (
            <div className="space-y-2 p-2">
              {threads.map((thread, index) => {
                const insights = detectEmailInsights(thread);
                
                return (
                  <motion.div
                    key={thread.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1, duration: 0.4 }}
                    className={cn(
                      "p-4 lg:p-6 cursor-pointer transition-all duration-300 hover:bg-muted/40 group border border-border/30 rounded-xl lg:rounded-2xl hover:shadow-lg hover:shadow-blue-500/5 hover:border-blue-200/50 active:scale-[0.98] lg:hover:-translate-y-0.5",
                      selectedThread?.id === thread.id && "bg-blue-50/80 dark:bg-blue-900/30 border-blue-300/60 shadow-lg shadow-blue-500/10 ring-1 ring-blue-500/20",
                      thread.unread && "bg-background/90 border-blue-400/40 shadow-sm",
                      !thread.unread && "bg-background/60",
                      "backdrop-blur-sm touch-manipulation"
                    )}
                    onClick={() => setSelectedThread(thread)}
                  >
                    <div className="flex items-start gap-3 lg:gap-5">
                      {/* Enhanced Avatar with Status */}
                      <div className="relative flex-shrink-0">
                        <Avatar className="h-12 w-12 lg:h-14 lg:w-14 ring-2 ring-white/60 shadow-lg">
                          <AvatarImage src={thread.participants[0]?.email ? `/api/avatar/${thread.participants[0].email}` : undefined} />
                          <AvatarFallback className={cn(
                            "font-bold text-base",
                            getClientTypeColor(thread.clientType)
                          )}>
                            {thread.participants[0]?.name?.charAt(0) || 'E'}
                          </AvatarFallback>
                        </Avatar>
                        {thread.leadScore && thread.leadScore > 75 && (
                          <div className="absolute -top-1 -right-1 lg:-top-2 lg:-right-2 w-5 h-5 lg:w-6 lg:h-6 bg-gradient-to-br from-red-500 to-red-600 rounded-full flex items-center justify-center shadow-lg ring-2 ring-white">
                            <span className="text-xs text-white font-bold">!</span>
                          </div>
                        )}
                        {thread.unread && (
                          <div className="absolute -bottom-1 -right-1 w-3 h-3 lg:w-4 lg:h-4 bg-blue-500 rounded-full border-2 border-white"></div>
                        )}
                      </div>

                      {/* Enhanced Content */}
                      <div className="flex-1 min-w-0">
                        {/* Header with Email Type */}
                        <div className="flex items-center gap-3 mb-4">
                          <div className="flex items-center gap-2">
                            <div className="w-8 h-8 rounded-xl bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-800 dark:to-blue-900 flex items-center justify-center">
                              {getEmailTypeIcon(thread.emailType)}
                            </div>
                            <Badge variant="outline" className={cn("text-sm font-medium px-3 py-1 border", getEmailTypeColor(thread.emailType))}>
                              {thread.emailType?.replace('_', ' ') || 'general'}
                            </Badge>
                          </div>
                          {thread.priority === 'high' && (
                            <Badge className="text-xs bg-red-100 text-red-700 border-red-200">
                              <AlertTriangle className="h-3 w-3 mr-1" />
                              High Priority
                            </Badge>
                          )}
                          {thread.leadScore && (
                            <Badge variant="outline" className={cn("text-sm font-semibold px-3 py-1", getLeadScoreColor(thread.leadScore))}>
                              <Target className="h-3 w-3 mr-1" />
                              {thread.leadScore}%
                            </Badge>
                          )}
                        </div>

                        {/* AI Insights - Enhanced Inline */}
                        {insights.length > 0 && (
                          <div className="mb-4 p-3 bg-gradient-to-r from-purple-50/60 to-indigo-50/40 dark:from-purple-900/20 dark:to-indigo-900/15 rounded-xl border border-purple-200/50">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="w-6 h-6 bg-purple-100 rounded-lg flex items-center justify-center">
                                <Brain className="h-4 w-4 text-purple-600" />
                              </div>
                              <span className="text-sm font-semibold text-purple-700 dark:text-purple-300">AI Insights</span>
                            </div>
                            <div className="flex items-center gap-2 flex-wrap">
                              {insights.slice(0, 3).map((insight, idx) => (
                                <Badge key={idx} variant="outline" className="text-xs bg-white/60 border-purple-200 text-purple-700">
                                  <span className="mr-1.5">{insight.icon}</span>
                                  {insight.message}
                                </Badge>
                              ))}
                              {insights.length > 3 && (
                                <Badge variant="outline" className="text-xs bg-white/60 border-purple-200 text-purple-700">
                                  +{insights.length - 3} more insights
                                </Badge>
                              )}
                            </div>
                          </div>
                        )}

                        {/* Subject and Status */}
                        <div className="flex items-center gap-3 mb-3">
                          <h3 className={cn(
                            "font-semibold text-base lg:text-lg leading-tight flex-1",
                            thread.unread && "text-foreground",
                            !thread.unread && "text-muted-foreground"
                          )}>
                            {thread.subject || 'No Subject'}
                          </h3>
                          <div className="flex items-center gap-2">
                            {thread.starred && (
                              <div className="w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center">
                                <Star className="h-4 w-4 text-yellow-600 fill-current" />
                              </div>
                            )}
                            {thread.hasAttachments && (
                              <div className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center">
                                <Paperclip className="h-3 w-3 text-gray-600" />
                              </div>
                            )}
                            {thread.hasSchedulingRequest && (
                              <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                                <Calendar className="h-3 w-3 text-green-600" />
                              </div>
                            )}
                            {thread.requiresFollowUp && (
                              <div className="w-6 h-6 bg-orange-100 rounded-full flex items-center justify-center">
                                <Bell className="h-3 w-3 text-orange-600" />
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Property Info */}
                        {thread.propertyInfo && (
                          <div className="flex items-center gap-4 mb-4 p-4 bg-gradient-to-r from-blue-50/60 to-blue-50/30 dark:from-blue-900/20 dark:to-blue-900/10 rounded-xl border border-blue-200/50">
                            <div className="w-10 h-10 bg-blue-100 rounded-xl flex items-center justify-center">
                              <Building2 className="h-5 w-5 text-blue-600" />
                            </div>
                            <div className="flex-1">
                              <div className="font-semibold text-foreground">{thread.propertyInfo.address}</div>
                              <div className="flex items-center gap-3 mt-1">
                                <span className="text-lg font-bold text-green-600">
                                  {formatCurrency(thread.propertyInfo.price)}
                                </span>
                                <Badge variant="outline" className="text-xs font-medium">
                                  {thread.propertyInfo.propertyType}
                                </Badge>
                                {thread.propertyInfo.mlsId && (
                                  <Badge variant="outline" className="text-xs">
                                    MLS: {thread.propertyInfo.mlsId}
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                        )}

                        {/* Email Snippet */}
                        <p className="text-sm lg:text-base text-muted-foreground mb-4 lg:mb-5 line-clamp-2 leading-relaxed">
                          {thread.snippet}
                        </p>

                        {/* Enhanced Metadata */}
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3 text-sm text-muted-foreground">
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4" />
                              <span className="font-semibold">{thread.participants[0]?.name || thread.participants[0]?.email?.split('@')[0] || 'Unknown'}</span>
                            </div>
                            <div className="w-1 h-1 bg-muted-foreground rounded-full"></div>
                            <div className="flex items-center gap-1">
                              <Clock className="h-3 w-3" />
                              <span>{formatTime(thread.lastMessageAt)}</span>
                            </div>
                            {thread.messageCount > 1 && (
                              <>
                                <div className="w-1 h-1 bg-muted-foreground rounded-full"></div>
                                <div className="flex items-center gap-1">
                                  <MessageCircle className="h-3 w-3" />
                                  <span className="font-medium">{thread.messageCount} messages</span>
                                </div>
                              </>
                            )}
                          </div>
                          
                          {/* Urgency Indicator */}
                          {thread.urgency && thread.urgency > 7 && (
                            <div className="flex items-center gap-2 px-3 py-1 bg-red-50 border border-red-200 rounded-full">
                              <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                              <span className="text-xs text-red-700 font-bold">URGENT</span>
                            </div>
                          )}
                        </div>


                        {/* Enhanced Labels */}
                        {thread.labels.length > 0 && (
                          <div className="flex items-center gap-1 mt-2">
                            {thread.labels.slice(0, 3).map((label) => (
                              <Badge key={label} variant="outline" className="text-xs">
                                {label}
                              </Badge>
                            ))}
                            {thread.labels.length > 3 && (
                              <Badge variant="outline" className="text-xs">
                                +{thread.labels.length - 3}
                              </Badge>
                            )}
                          </div>
                        )}
                      </div>

                      {/* Enhanced Quick Actions */}
                      <div className="flex-shrink-0 opacity-0 group-hover:opacity-100 transition-all duration-300">
                        <div className="flex flex-col gap-2">
                          <Button variant="ghost" size="sm" className="h-10 w-10 p-0 hover:bg-blue-50 hover:border-blue-200 border border-transparent" title="More options">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                          {thread.hasSchedulingRequest && (
                            <Button variant="ghost" size="sm" className="h-10 w-10 p-0 hover:bg-green-50 hover:border-green-200 border border-transparent" title="Schedule showing">
                              <Calendar className="h-4 w-4 text-green-600" />
                            </Button>
                          )}
                          {thread.leadScore && thread.leadScore > 60 && (
                            <Button variant="ghost" size="sm" className="h-10 w-10 p-0 hover:bg-purple-50 hover:border-purple-200 border border-transparent" title="Create lead">
                              <Target className="h-4 w-4 text-purple-600" />
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </div>
          )}
        </div>
      </div>

      {/* Enhanced Thread Panel */}
      {viewMode === 'split' && selectedThread && (
        <div className="flex-1 flex flex-col bg-gradient-to-br from-background/80 to-muted/20 backdrop-blur-lg relative">
          {/* Mobile Back Button */}
          <div className="lg:hidden p-4 border-b border-border/30 bg-background/90">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => setSelectedThread(null)}
              className="h-10"
            >
              <ChevronLeft className="h-4 w-4 mr-2" />
              Back to Conversations
            </Button>
          </div>
          {/* Enhanced Smart Actions Bar */}
          {smartActions.length > 0 && (
            <div className="p-6 border-b border-border/30 bg-gradient-to-r from-blue-50/80 to-indigo-50/60 dark:from-blue-900/20 dark:to-indigo-900/15">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                    <Zap className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-blue-700 dark:text-blue-300">Smart Actions</h3>
                    <p className="text-sm text-blue-600/70 dark:text-blue-400/70">AI-powered suggestions for this conversation</p>
                  </div>
                </div>
                <Badge variant="secondary" className="text-xs bg-blue-100 text-blue-700 px-3 py-1">
                  {smartActions.length} suggestions
                </Badge>
              </div>
              <div className="flex items-center gap-3 flex-wrap mt-4">
                {smartActions.map((action) => (
                  <Button 
                    key={action.id}
                    variant="outline" 
                    size="sm"
                    onClick={() => handleSmartAction(action)}
                    className="text-sm h-10 px-4 bg-white/80 dark:bg-slate-800/80 hover:bg-white dark:hover:bg-slate-800 hover:shadow-md transition-all duration-200 border-blue-200/50 hover:border-blue-300"
                  >
                    {action.title}
                    <Badge variant="secondary" className="ml-2 text-xs h-5 px-2 bg-blue-100 text-blue-700">
                      {action.confidence}%
                    </Badge>
                  </Button>
                ))}
              </div>
            </div>
          )}
          {/* Enhanced Thread Header */}
          <div className="p-8 border-b border-border/30 bg-gradient-to-r from-background/90 to-muted/30">
            <div className="flex items-start justify-between mb-6">
              <div className="flex-1">
                <div className="flex items-center gap-4 mb-3">
                  <h1 className="text-2xl font-bold text-foreground leading-tight">
                    {selectedThread.subject || 'No Subject'}
                  </h1>
                  {selectedThread.emailType && (
                    <Badge variant="outline" className={cn("text-sm font-semibold px-4 py-2", getEmailTypeColor(selectedThread.emailType))}>
                      {getEmailTypeIcon(selectedThread.emailType)}
                      <span className="ml-2">{selectedThread.emailType.replace('_', ' ')}</span>
                    </Badge>
                  )}
                  {selectedThread.priority === 'high' && (
                    <Badge className="text-sm bg-red-100 text-red-700 border-red-200 px-4 py-2">
                      <AlertTriangle className="h-4 w-4 mr-2" />
                      High Priority
                    </Badge>
                  )}
                </div>
                {selectedThread.propertyInfo && (
                  <div className="flex items-center gap-3 text-muted-foreground">
                    <Building2 className="h-4 w-4" />
                    <span className="text-sm">Property: {selectedThread.propertyInfo.address}</span>
                    <span className="text-sm font-semibold text-green-600">
                      {formatCurrency(selectedThread.propertyInfo.price)}
                    </span>
                  </div>
                )}
              </div>
              <div className="flex items-center gap-2">
                <Button size="sm" className="h-10 px-4">
                  <Reply className="h-4 w-4 mr-2" />
                  Reply
                </Button>
                <Button variant="outline" size="sm" className="h-10 px-4">
                  <ReplyAll className="h-4 w-4 mr-2" />
                  Reply All
                </Button>
                <Button variant="outline" size="sm" className="h-10 px-4">
                  <Forward className="h-4 w-4 mr-2" />
                  Forward
                </Button>
                <Button variant="outline" size="sm" className="h-10 w-10 p-0">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Enhanced Email Meta */}
            <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4 lg:gap-6">
              <div className="flex items-center gap-3 p-3 bg-muted/40 rounded-xl">
                <div className="w-10 h-10 bg-blue-100 rounded-xl flex items-center justify-center">
                  <User className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <div className="text-xs text-muted-foreground font-medium">From</div>
                  <div className="font-semibold text-foreground">
                    {selectedThread.participants[0]?.name || selectedThread.participants[0]?.email?.split('@')[0] || 'Unknown'}
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-3 p-3 bg-muted/40 rounded-xl">
                <div className="w-10 h-10 bg-green-100 rounded-xl flex items-center justify-center">
                  <Clock className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <div className="text-xs text-muted-foreground font-medium">Received</div>
                  <div className="font-semibold text-foreground">{formatTime(selectedThread.lastMessageAt)}</div>
                </div>
              </div>
              {selectedThread.leadScore && (
                <div className="flex items-center gap-3 p-3 bg-muted/40 rounded-xl">
                  <div className="w-10 h-10 bg-purple-100 rounded-xl flex items-center justify-center">
                    <Target className="h-5 w-5 text-purple-600" />
                  </div>
                  <div>
                    <div className="text-xs text-muted-foreground font-medium">Lead Score</div>
                    <div className="font-semibold text-foreground">{selectedThread.leadScore}%</div>
                  </div>
                </div>
              )}
              {selectedThread.messageCount > 1 && (
                <div className="flex items-center gap-3 p-3 bg-muted/40 rounded-xl">
                  <div className="w-10 h-10 bg-orange-100 rounded-xl flex items-center justify-center">
                    <MessageCircle className="h-5 w-5 text-orange-600" />
                  </div>
                  <div>
                    <div className="text-xs text-muted-foreground font-medium">Messages</div>
                    <div className="font-semibold text-foreground">{selectedThread.messageCount} in thread</div>
                  </div>
                </div>
              )}
            </div>

          </div>

          {/* Enhanced Thread Content - Premium Email Display */}
          <div className="flex-1 overflow-y-auto bg-gradient-to-b from-transparent to-muted/5 p-6">
            <div className="max-w-4xl mx-auto space-y-6">
              {/* Email Content Card */}
              <Card className="bg-background/90 border-border/50 shadow-lg shadow-black/5 backdrop-blur-sm">
                <CardHeader className="border-b border-border/30 bg-muted/20">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-semibold">Email Content</CardTitle>
                    <div className="flex items-center gap-2">
                      {selectedThread.hasAttachments && (
                        <Badge variant="outline" className="text-xs">
                          <Paperclip className="h-3 w-3 mr-1" />
                          Attachments
                        </Badge>
                      )}
                      <Badge variant="outline" className="text-xs">
                        {selectedThread.messageCount === 1 ? 'Single message' : `${selectedThread.messageCount} messages`}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="p-8">
                  <div className="prose prose-lg max-w-none">
                    <div className="bg-gradient-to-r from-blue-50/50 to-indigo-50/30 dark:from-blue-900/10 dark:to-indigo-900/5 p-6 rounded-xl border border-blue-200/30 mb-6">
                      <p className="text-foreground leading-relaxed text-base mb-0">
                        {selectedThread.snippet}
                      </p>
                    </div>
                    <div className="text-muted-foreground text-sm bg-muted/30 p-4 rounded-lg border border-border/30">
                      <div className="flex items-center gap-2 mb-2">
                        <Eye className="h-4 w-4" />
                        <span className="font-medium">Email Preview</span>
                      </div>
                      <p className="mb-0">
                        This is a preview of the email content. The full message would be displayed here with proper formatting, 
                        including HTML content, embedded images, and interactive elements. Thread conversations would show 
                        chronologically with clear message separation.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              {/* Enhanced AI Intelligence Card */}
              <Card className="border-purple-200/50 bg-gradient-to-br from-purple-50/80 to-indigo-50/60 dark:from-purple-900/20 dark:to-indigo-900/15 shadow-lg shadow-purple-500/5">
                <CardHeader className="pb-4 bg-gradient-to-r from-purple-100/50 to-indigo-100/40 dark:from-purple-900/30 dark:to-indigo-900/25 border-b border-purple-200/30">
                  <CardTitle className="flex items-center gap-3 text-xl">
                    <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                      <Brain className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-purple-700 dark:text-purple-300">AI Intelligence & Insights</h3>
                      <p className="text-sm text-purple-600/70 dark:text-purple-400/70 font-normal mt-1">Powered by advanced real estate AI</p>
                    </div>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-6 p-6">
                {/* Enhanced Analysis Grid */}
                <div className="grid grid-cols-1 xl:grid-cols-2 gap-4 lg:gap-6">
                  <div className="space-y-4">
                    <h4 className="font-bold text-base text-purple-700 dark:text-purple-300 flex items-center gap-2">
                      <BarChart3 className="h-5 w-5" />
                      Email Analysis
                    </h4>
                    <div className="grid grid-cols-1 gap-3">
                      <div className="flex items-center justify-between p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl border border-purple-200/30">
                        <span className="text-sm font-medium">Lead Score</span>
                        <Badge className={cn("text-sm font-bold px-3 py-1", getLeadScoreColor(selectedThread.leadScore))}>
                          {selectedThread.leadScore}%
                        </Badge>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl border border-purple-200/30">
                        <span className="text-sm font-medium">Sentiment</span>
                        <Badge variant="outline" className="text-sm capitalize">
                          {selectedThread.sentiment}
                        </Badge>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl border border-purple-200/30">
                        <span className="text-sm font-medium">Priority</span>
                        <Badge variant="outline" className="text-sm capitalize">
                          {selectedThread.priority}
                        </Badge>
                      </div>
                    </div>
                  </div>
                  <div className="space-y-4">
                    <h4 className="font-bold text-base text-purple-700 dark:text-purple-300 flex items-center gap-2">
                      <Target className="h-5 w-5" />
                      Detected Intent
                    </h4>
                    <div className="space-y-3">
                      {selectedThread.hasSchedulingRequest && (
                        <div className="flex items-center gap-3 p-3 bg-green-50/80 border border-green-200/50 rounded-xl">
                          <Calendar className="h-5 w-5 text-green-600" />
                          <span className="font-medium text-green-700">Scheduling Request Detected</span>
                        </div>
                      )}
                      {selectedThread.propertyInfo && (
                        <div className="flex items-center gap-3 p-3 bg-blue-50/80 border border-blue-200/50 rounded-xl">
                          <Building2 className="h-5 w-5 text-blue-600" />
                          <span className="font-medium text-blue-700">Property Inquiry</span>
                        </div>
                      )}
                      {selectedThread.requiresFollowUp && (
                        <div className="flex items-center gap-3 p-3 bg-orange-50/80 border border-orange-200/50 rounded-xl">
                          <Bell className="h-5 w-5 text-orange-600" />
                          <span className="font-medium text-orange-700">Follow-up Required</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Enhanced Property Information */}
                {selectedThread.propertyInfo && (
                  <div className="p-6 bg-gradient-to-br from-blue-50/80 to-indigo-50/60 dark:from-blue-900/20 dark:to-indigo-900/15 rounded-2xl border border-blue-200/50">
                    <h4 className="font-bold text-lg text-blue-700 dark:text-blue-300 mb-4 flex items-center gap-2">
                      <Building2 className="h-6 w-6" />
                      Property Details
                    </h4>
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-3 p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl">
                          <MapPin className="h-5 w-5 text-blue-600" />
                          <div>
                            <div className="text-xs text-muted-foreground font-medium">Address</div>
                            <div className="font-semibold">{selectedThread.propertyInfo.address}</div>
                          </div>
                        </div>
                        <div className="flex items-center gap-3 p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl">
                          <DollarSign className="h-5 w-5 text-green-600" />
                          <div>
                            <div className="text-xs text-muted-foreground font-medium">Price</div>
                            <div className="font-bold text-green-600 text-lg">{formatCurrency(selectedThread.propertyInfo.price)}</div>
                          </div>
                        </div>
                      </div>
                      <div className="space-y-3">
                        <div className="flex items-center gap-3 p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl">
                          <Home className="h-5 w-5 text-purple-600" />
                          <div>
                            <div className="text-xs text-muted-foreground font-medium">Property Type</div>
                            <div className="font-semibold">{selectedThread.propertyInfo.propertyType}</div>
                          </div>
                        </div>
                        {selectedThread.propertyInfo.mlsId && (
                          <div className="flex items-center gap-3 p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl">
                            <FileText className="h-5 w-5 text-orange-600" />
                            <div>
                              <div className="text-xs text-muted-foreground font-medium">MLS ID</div>
                              <div className="font-semibold">{selectedThread.propertyInfo.mlsId}</div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                {/* Enhanced Client Preferences */}
                {selectedThread.extractedData && (
                  <div className="p-6 bg-gradient-to-br from-green-50/80 to-emerald-50/60 dark:from-green-900/20 dark:to-emerald-900/15 rounded-2xl border border-green-200/50">
                    <h4 className="font-bold text-lg text-green-700 dark:text-green-300 mb-4 flex items-center gap-2">
                      <Users className="h-6 w-6" />
                      Client Preferences
                    </h4>
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                      {selectedThread.extractedData.budget && (
                        <div className="flex items-center gap-3 p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl">
                          <DollarSign className="h-5 w-5 text-green-600" />
                          <div>
                            <div className="text-xs text-muted-foreground font-medium">Budget Range</div>
                            <div className="font-semibold">
                              {formatCurrency(selectedThread.extractedData.budget.min)} - {formatCurrency(selectedThread.extractedData.budget.max)}
                            </div>
                          </div>
                        </div>
                      )}
                      {selectedThread.extractedData.timeline && (
                        <div className="flex items-center gap-3 p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl">
                          <Clock className="h-5 w-5 text-blue-600" />
                          <div>
                            <div className="text-xs text-muted-foreground font-medium">Timeline</div>
                            <div className="font-semibold">{selectedThread.extractedData.timeline}</div>
                          </div>
                        </div>
                      )}
                      {selectedThread.extractedData.propertyTypes && (
                        <div className="col-span-full">
                          <div className="flex items-center gap-2 mb-2">
                            <Home className="h-4 w-4 text-purple-600" />
                            <span className="text-sm font-medium text-muted-foreground">Property Types:</span>
                          </div>
                          <div className="flex gap-2 flex-wrap">
                            {selectedThread.extractedData.propertyTypes.map((type, idx) => (
                              <Badge key={idx} variant="outline" className="text-sm">{type}</Badge>
                            ))}
                          </div>
                        </div>
                      )}
                      {selectedThread.extractedData.preferredLocations && (
                        <div className="col-span-full">
                          <div className="flex items-center gap-2 mb-2">
                            <MapPin className="h-4 w-4 text-red-600" />
                            <span className="text-sm font-medium text-muted-foreground">Preferred Locations:</span>
                          </div>
                          <div className="flex gap-2 flex-wrap">
                            {selectedThread.extractedData.preferredLocations.map((location, idx) => (
                              <Badge key={idx} variant="outline" className="text-sm">{location}</Badge>
                            ))}
                          </div>
                        </div>
                      )}
                      {selectedThread.extractedData.preApproved !== undefined && (
                        <div className="flex items-center gap-3 p-3 bg-white/60 dark:bg-slate-800/60 rounded-xl">
                          <CheckCircle className="h-5 w-5 text-green-600" />
                          <div>
                            <div className="text-xs text-muted-foreground font-medium">Pre-approval Status</div>
                            <div className="font-semibold">
                              {selectedThread.extractedData.preApproved ? 'Pre-approved' : 'Not pre-approved'}
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Enhanced Action Buttons */}
                <div className="pt-4 border-t border-purple-200/30">
                  <h4 className="font-bold text-base text-purple-700 dark:text-purple-300 mb-4 flex items-center gap-2">
                    <Zap className="h-5 w-5" />
                    Quick Actions
                  </h4>
                  <div className="grid grid-cols-2 lg:grid-cols-4 gap-3">
                    <Button size="sm" className="h-12 flex-col gap-1 bg-blue-600 hover:bg-blue-700">
                      <Target className="h-5 w-5" />
                      <span className="text-xs">Create Lead</span>
                    </Button>
                    <Button size="sm" variant="outline" className="h-12 flex-col gap-1 border-green-200 hover:bg-green-50">
                      <Calendar className="h-5 w-5 text-green-600" />
                      <span className="text-xs">Schedule Showing</span>
                    </Button>
                    <Button size="sm" variant="outline" className="h-12 flex-col gap-1 border-orange-200 hover:bg-orange-50">
                      <CheckSquare className="h-5 w-5 text-orange-600" />
                      <span className="text-xs">Create Task</span>
                    </Button>
                    <Button size="sm" variant="outline" className="h-12 flex-col gap-1 border-purple-200 hover:bg-purple-50">
                      <Building2 className="h-5 w-5 text-purple-600" />
                      <span className="text-xs">Send Properties</span>
                    </Button>
                  </div>
                </div>
              </CardContent>
              </Card>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Contact Panel - Desktop Only */}
      {viewMode === 'split' && showContactPanel && selectedThread && (
        <div className="hidden xl:block w-96 border-l border-border/30 bg-gradient-to-b from-muted/40 to-muted/20 backdrop-blur-lg">
          <div className="p-6 border-b border-border/30 bg-gradient-to-r from-background/90 to-muted/50">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg">
                  <Users className="h-5 w-5 text-white" />
                </div>
                <div>
                  <h3 className="font-bold text-lg">Contact Intelligence</h3>
                  <p className="text-sm text-muted-foreground">AI-powered client insights</p>
                </div>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowContactPanel(false)}
                className="h-10 w-10 p-0"
              >
                <EyeOff className="h-4 w-4" />
              </Button>
            </div>
          </div>

          <div className="p-6 space-y-6">
            {/* Enhanced Contact Info */}
            <div className="bg-background/60 p-6 rounded-2xl border border-border/30 shadow-sm">
              <div className="flex items-center gap-4 mb-4">
                <Avatar className="h-16 w-16 ring-4 ring-white/60 shadow-lg">
                  <AvatarImage src={selectedThread.participants[0]?.email ? `/api/avatar/${selectedThread.participants[0].email}` : undefined} />
                  <AvatarFallback className={cn("font-bold text-lg", getClientTypeColor(selectedThread?.clientType))}>
                    {selectedThread.participants[0]?.name?.charAt(0) || 'U'}
                  </AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <h4 className="font-bold text-xl">{selectedThread.participants[0]?.name || 'Unknown Contact'}</h4>
                  <p className="text-sm text-muted-foreground mb-2">{selectedThread.participants[0]?.email || 'No email'}</p>
                  <div className="flex gap-2">
                    {selectedThread?.clientType && (
                      <Badge className={cn("text-sm font-medium px-3 py-1", getClientTypeColor(selectedThread.clientType))}>
                        <User className="h-3 w-3 mr-1" />
                        {selectedThread.clientType}
                      </Badge>
                    )}
                    {selectedThread.leadScore && selectedThread.leadScore > 60 && (
                      <Badge className="text-sm bg-purple-100 text-purple-700 border-purple-200 px-3 py-1">
                        <Target className="h-3 w-3 mr-1" />
                        High Value
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Enhanced Communication Stats */}
            <div className="bg-background/60 p-6 rounded-2xl border border-border/30 shadow-sm">
              <h5 className="font-bold text-base mb-4 flex items-center gap-2">
                <MessageCircle className="h-5 w-5 text-blue-600" />
                Communication Stats
              </h5>
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center p-4 bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl border border-green-200/50">
                  <div className="text-2xl font-bold text-green-700">87%</div>
                  <div className="text-sm text-green-600/80 font-medium">Response Rate</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl border border-blue-200/50">
                  <div className="text-2xl font-bold text-blue-700">2.5h</div>
                  <div className="text-sm text-blue-600/80 font-medium">Avg Response</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-purple-50 to-violet-50 rounded-xl border border-purple-200/50">
                  <div className="text-2xl font-bold text-purple-700">{selectedThread.messageCount || 1}</div>
                  <div className="text-sm text-purple-600/80 font-medium">Total Messages</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-orange-50 to-amber-50 rounded-xl border border-orange-200/50">
                  <div className="text-2xl font-bold text-orange-700">
                    {selectedThread.urgency || Math.floor(Math.random() * 5) + 5}
                  </div>
                  <div className="text-sm text-orange-600/80 font-medium">Engagement</div>
                </div>
              </div>
            </div>

            {/* Enhanced Client Preferences */}
            {selectedThread?.extractedData && (
              <div className="bg-background/60 p-6 rounded-2xl border border-border/30 shadow-sm">
                <h5 className="font-bold text-base mb-4 flex items-center gap-2">
                  <Heart className="h-5 w-5 text-red-500" />
                  Client Preferences
                </h5>
                <div className="space-y-4">
                  {selectedThread.extractedData.budget && (
                    <div className="flex items-center justify-between p-3 bg-green-50/60 rounded-xl border border-green-200/30">
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-green-600" />
                        <span className="font-medium">Budget</span>
                      </div>
                      <span className="font-bold text-green-700">
                        {formatCurrency(selectedThread.extractedData.budget.min)} - {formatCurrency(selectedThread.extractedData.budget.max)}
                      </span>
                    </div>
                  )}
                  {selectedThread.extractedData.timeline && (
                    <div className="flex items-center justify-between p-3 bg-blue-50/60 rounded-xl border border-blue-200/30">
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-blue-600" />
                        <span className="font-medium">Timeline</span>
                      </div>
                      <span className="font-bold text-blue-700">{selectedThread.extractedData.timeline}</span>
                    </div>
                  )}
                  {selectedThread.extractedData.preApproved !== undefined && (
                    <div className="flex items-center justify-between p-3 bg-purple-50/60 rounded-xl border border-purple-200/30">
                      <div className="flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-purple-600" />
                        <span className="font-medium">Pre-approved</span>
                      </div>
                      <Badge className={selectedThread.extractedData.preApproved ? "bg-green-100 text-green-700 border-green-200" : "bg-gray-100 text-gray-700 border-gray-200"}>
                        {selectedThread.extractedData.preApproved ? "Yes" : "No"}
                      </Badge>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Enhanced Quick Actions */}
            <div className="bg-background/60 p-6 rounded-2xl border border-border/30 shadow-sm">
              <h5 className="font-bold text-base mb-4 flex items-center gap-2">
                <Zap className="h-5 w-5 text-yellow-600" />
                Quick Actions
              </h5>
              <div className="space-y-3">
                <Button size="sm" className="w-full justify-start h-12 bg-blue-600 hover:bg-blue-700">
                  <Mail className="h-4 w-4 mr-3" />
                  <div className="text-left">
                    <div className="font-medium">Send Follow-up</div>
                    <div className="text-xs opacity-80">AI-generated email</div>
                  </div>
                </Button>
                <Button size="sm" variant="outline" className="w-full justify-start h-12 border-green-200 hover:bg-green-50">
                  <Calendar className="h-4 w-4 mr-3 text-green-600" />
                  <div className="text-left">
                    <div className="font-medium">Schedule Showing</div>
                    <div className="text-xs text-muted-foreground">Calendar integration</div>
                  </div>
                </Button>
                <Button size="sm" variant="outline" className="w-full justify-start h-12 border-purple-200 hover:bg-purple-50">
                  <Building2 className="h-4 w-4 mr-3 text-purple-600" />
                  <div className="text-left">
                    <div className="font-medium">Send Properties</div>
                    <div className="text-xs text-muted-foreground">Matching listings</div>
                  </div>
                </Button>
                <Button size="sm" variant="outline" className="w-full justify-start h-12 border-orange-200 hover:bg-orange-50">
                  <Target className="h-4 w-4 mr-3 text-orange-600" />
                  <div className="text-left">
                    <div className="font-medium">Add to Pipeline</div>
                    <div className="text-xs text-muted-foreground">Create CRM lead</div>
                  </div>
                </Button>
              </div>
            </div>
            
            {/* Property Match Suggestions */}
            {selectedThread?.extractedData?.budget && (
              <div className="bg-background/60 p-6 rounded-2xl border border-border/30 shadow-sm">
                <h5 className="font-bold text-base mb-4 flex items-center gap-2">
                  <Building2 className="h-5 w-5 text-blue-600" />
                  Property Matches
                </h5>
                <div className="space-y-3">
                  <div className="p-3 bg-blue-50/60 rounded-xl border border-blue-200/30">
                    <div className="font-medium text-sm">3 matching properties</div>
                    <div className="text-xs text-muted-foreground">Based on budget & preferences</div>
                  </div>
                  <Button size="sm" variant="outline" className="w-full text-xs">
                    View All Matches
                  </Button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}