"use client";
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Mail, Star, Clock, AlertTriangle, CheckCircle, MoreHorizontal, Reply, ReplyAll, Forward, Archive, Trash2, Pin, Snooze, Tag, User, Building, Phone, MapPin, Calendar, MessageSquare, FileText, Eye, EyeOff, Filter, Search, ChevronRight, ChevronLeft, Send, Edit, Plus, Sparkles, Zap, Target, Briefcase, CheckSquare, Home, DollarSign, Users, Bot, Brain, TrendingUp, Bookmark, Bell, Palette, RefreshCw, Settings, X, Copy, ExternalLink, Timer, Calendar2, Clock3, CheckCircle2, XCircle, Lightbulb, MessageCircle, Paperclip, Flag, Gauge, ArrowRight, PlayCircle, PauseCircle, CalendarDays, UserPlus, FileCheck, HandHeart, Handshake, MapPinIcon, CreditCard, Calculator, Building2, Key, Wrench, Percent, Fire, ShoppingCart } from 'lucide-react';
import { cn } from '@/lib/utils';
import { CategoryModal } from './CategoryModal';

interface EmailThread {
  id: string;
  subject: string;
  snippet: string;
  participants: Array<{ name: string; email: string }>;
  messageCount: number;
  unread: boolean;
  starred: boolean;
  hasAttachments: boolean;
  labels: string[];
  lastMessageAt: string;
  updatedAt: string;
  // AI Analysis data
  aiAnalysis?: {
    category: string;
    priorityScore: number;
    leadScore: number;
    confidenceScore: number;
    sentimentScore: number;
    keyEntities: any;
    processingStatus: string;
    analyzedAt: string;
  };
  // Real estate specific fields derived from AI analysis
  emailType?: 'buyer_inquiry' | 'seller_lead' | 'showing_request' | 'property_inquiry' | 'referral' | 'vendor' | 'follow_up' | 'market_update' | 'general';
  priority?: 'high' | 'medium' | 'low';
  propertyInfo?: {
    address?: string;
    price?: number | string;
    propertyType?: string;
    mlsId?: string;
  };
  leadScore?: number;
  clientType?: 'buyer' | 'seller' | 'investor' | 'renter' | 'unknown';
  hasSchedulingRequest?: boolean;
  requiresFollowUp?: boolean;
  sentiment?: 'positive' | 'neutral' | 'negative';
  urgency?: number; // 1-10 scale
  autoGenerated?: boolean;
  aiSummary?: string;
  extractedData?: {
    budget?: { min: number; max: number };
    preferredLocations?: string[];
    propertyTypes?: string[];
    timeline?: string;
    preApproved?: boolean;
  };
}

interface Contact {
  id: string;
  name: string;
  email: string;
  company?: string;
  title?: string;
  phone?: string;
  location?: string;
  avatarUrl?: string;
  intentScore?: number;
  dealHistory?: Array<{
    id: string;
    title: string;
    value: number;
    stage: string;
    status: string;
  }>;
  notes?: string;
  tags: string[];
  lastContact?: string;
  nextFollowUp?: string;
  // Enhanced real estate fields
  clientStatus?: 'active' | 'prospect' | 'qualified' | 'closed' | 'nurturing';
  preferredContactMethod?: 'email' | 'phone' | 'text' | 'app';
  responseRate?: number;
  averageResponseTime?: string;
  totalEmailsSent?: number;
  totalEmailsReceived?: number;
  lastShowingDate?: string;
  propertyPreferences?: {
    priceRange?: { min: number; max: number };
    bedrooms?: number;
    bathrooms?: number;
    propertyTypes?: string[];
    locations?: string[];
    features?: string[];
  };
  financialInfo?: {
    preApprovalAmount?: number;
    preApprovalDate?: string;
    lenderInfo?: string;
    downPayment?: number;
  };
  currentProperties?: Array<{
    id: string;
    address: string;
    interest: 'high' | 'medium' | 'low';
    status: 'watching' | 'scheduled' | 'visited' | 'offer_made' | 'passed';
  }>;
  communication: {
    totalInteractions: number;
    lastResponseTime: string;
    preferredTimes: string[];
    emailEngagement: number;
  };
}

interface EnhancedInboxProps {
  activeTab?: string;
  searchQuery?: string;
  selectedFilter?: string;
}

export default function EnhancedInbox({ activeTab = 'all', searchQuery = '', selectedFilter = '' }: EnhancedInboxProps) {
  const [threads, setThreads] = useState<EmailThread[]>([]);
  const [selectedThread, setSelectedThread] = useState<EmailThread | null>(null);
  const [contact, setContact] = useState<Contact | null>(null);
  const [showContactPanel, setShowContactPanel] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [viewMode, setViewMode] = useState<'split' | 'thread'>('split');
  const [showFilters, setShowFilters] = useState(false);
  const [selectedThreads, setSelectedThreads] = useState<string[]>([]);
  const [emailFilters, setEmailFilters] = useState({
    emailType: '',
    clientType: '',
    priority: '',
    hasProperty: false,
    requiresFollowUp: false,
    unreadOnly: false,
    dateRange: '',
    leadScore: { min: 0, max: 100 }
  });
  const [sortBy, setSortBy] = useState<'date' | 'priority' | 'leadScore' | 'sender'>('date');
  const [showSmartSuggestions, setShowSmartSuggestions] = useState(true);
  const [aiInsights, setAiInsights] = useState<any>(null);
  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);
  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);
  const [syncStatus, setSyncStatus] = useState<any>(null);
  const [refreshing, setRefreshing] = useState(false);
  const [categoryModalOpen, setCategoryModalOpen] = useState(false);
  const [categoryModalThread, setCategoryModalThread] = useState<{ id: string; category: string } | null>(null);

  const fetchThreads = async () => {
    try {
      const params = new URLSearchParams();
      if (activeTab !== 'all') params.append('filter', activeTab);
      if (searchQuery) params.append('search', searchQuery);
      if (selectedFilter) params.append('filter', selectedFilter);
      
      const response = await fetch(`/api/inbox/threads?${params.toString()}`);
      if (response.ok) {
        const data = await response.json();
        setThreads(data.threads || []);
      } else {
        setThreads([]);
      }
    } catch (error) {
      console.error('Failed to fetch email threads:', error);
      setThreads([]);
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  };

  const checkSyncStatus = async () => {
    try {
      const response = await fetch('/api/sync/auto');
      if (response.ok) {
        const data = await response.json();
        setSyncStatus(data);
        
        // Check if there's new sync data
        const emailLastSync = data.email?.lastSyncAny;
        if (emailLastSync) {
          const newSyncTime = new Date(emailLastSync);
          if (!lastSyncTime || newSyncTime > lastSyncTime) {
            setLastSyncTime(newSyncTime);
            
            // Auto-refresh threads if enabled and there's new data
            if (autoRefreshEnabled && lastSyncTime && newSyncTime > lastSyncTime) {
              setRefreshing(true);
              await fetchThreads();
            }
          }
        }
      }
    } catch (error) {
      console.error('Failed to check sync status:', error);
    }
  };

  const manualRefresh = async () => {
    setRefreshing(true);
    setIsLoading(true);
    await fetchThreads();
  };

  // Initial threads fetch
  useEffect(() => {
    fetchThreads();
  }, [activeTab, searchQuery, selectedFilter]);

  // Auto-refresh polling
  useEffect(() => {
    let syncInterval: NodeJS.Timeout;
    
    if (autoRefreshEnabled) {
      // Check sync status every 30 seconds
      syncInterval = setInterval(checkSyncStatus, 30000);
      
      // Initial sync status check
      checkSyncStatus();
    }

    return () => {
      if (syncInterval) {
        clearInterval(syncInterval);
      }
    };
  }, [autoRefreshEnabled, lastSyncTime]);

  useEffect(() => {
    // Fetch contact data when a thread is selected
    if (selectedThread && selectedThread.participants.length > 0) {
      const fetchContact = async () => {
        try {
          const participant = selectedThread.participants[0];
          const response = await fetch(`/api/contacts?search=${participant.email}`);
          if (response.ok) {
            const data = await response.json();
            if (data.contacts && data.contacts.length > 0) {
              const contactData = data.contacts[0];
              setContact({
                id: contactData.id,
                name: contactData.name,
                email: contactData.email,
                company: contactData.company,
                title: contactData.title,
                phone: contactData.phone,
                location: contactData.location,
                avatarUrl: contactData.avatarUrl,
                tags: contactData.tags || [],
                lastContact: contactData.lastActivity,
                notes: 'Contact information from email thread'
              });
            } else {
              // Create a basic contact from participant data
              setContact({
                id: 'temp-' + Date.now(),
                name: participant.name,
                email: participant.email,
                tags: ['email-contact'],
                lastContact: selectedThread.lastMessageAt,
                notes: 'Contact from email thread'
              });
            }
          }
        } catch (error) {
          console.error('Failed to fetch contact data:', error);
          // Create a basic contact from participant data
          if (selectedThread.participants.length > 0) {
            const participant = selectedThread.participants[0];
            setContact({
              id: 'temp-' + Date.now(),
              name: participant.name,
              email: participant.email,
              tags: ['email-contact'],
              lastContact: selectedThread.lastMessageAt,
              notes: 'Contact from email thread'
            });
          }
        }
      };

      fetchContact();
    } else {
      setContact(null);
    }
  }, [selectedThread]);

  const getIntentColor = (score?: number) => {
    if (!score) return 'bg-slate-100 text-slate-700';
    if (score >= 80) return 'bg-green-100 text-green-700';
    if (score >= 60) return 'bg-yellow-100 text-yellow-700';
    return 'bg-red-100 text-red-700';
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-700';
      case 'medium':
        return 'bg-yellow-100 text-yellow-700';
      default:
        return 'bg-green-100 text-green-700';
    }
  };

  const getStageColor = (stage: string) => {
    switch (stage) {
      case 'lead':
        return 'bg-blue-100 text-blue-700';
      case 'prospect':
        return 'bg-purple-100 text-purple-700';
      case 'qualified':
        return 'bg-green-100 text-green-700';
      default:
        return 'bg-slate-100 text-slate-700';
    }
  };

  // New utility functions for real estate email management
  const getEmailTypeColor = (type?: string) => {
    switch (type) {
      case 'buyer_inquiry':
        return 'bg-emerald-100 text-emerald-700 border-emerald-200';
      case 'seller_lead':
        return 'bg-blue-100 text-blue-700 border-blue-200';
      case 'showing_request':
        return 'bg-purple-100 text-purple-700 border-purple-200';
      case 'property_inquiry':
        return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'referral':
        return 'bg-pink-100 text-pink-700 border-pink-200';
      case 'vendor':
        return 'bg-gray-100 text-gray-700 border-gray-200';
      case 'follow_up':
        return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'market_update':
        return 'bg-indigo-100 text-indigo-700 border-indigo-200';
      default:
        return 'bg-slate-100 text-slate-700 border-slate-200';
    }
  };

  const getEmailTypeIcon = (type?: string) => {
    switch (type) {
      case 'buyer_inquiry':
        return <Home className="h-3 w-3" />;
      case 'seller_lead':
        return <DollarSign className="h-3 w-3" />;
      case 'showing_request':
        return <Calendar className="h-3 w-3" />;
      case 'property_inquiry':
        return <Building2 className="h-3 w-3" />;
      case 'referral':
        return <Users className="h-3 w-3" />;
      case 'vendor':
        return <Wrench className="h-3 w-3" />;
      case 'follow_up':
        return <Clock className="h-3 w-3" />;
      case 'market_update':
        return <TrendingUp className="h-3 w-3" />;
      default:
        return <Mail className="h-3 w-3" />;
    }
  };

  const getClientTypeColor = (type?: string) => {
    switch (type) {
      case 'buyer':
        return 'bg-green-100 text-green-700';
      case 'seller':
        return 'bg-blue-100 text-blue-700';
      case 'investor':
        return 'bg-purple-100 text-purple-700';
      case 'renter':
        return 'bg-orange-100 text-orange-700';
      default:
        return 'bg-gray-100 text-gray-700';
    }
  };

  const getLeadScoreColor = (score?: number) => {
    if (!score) return 'bg-gray-100 text-gray-600';
    if (score >= 80) return 'bg-red-100 text-red-700 border-red-200';
    if (score >= 60) return 'bg-orange-100 text-orange-700 border-orange-200';
    if (score >= 40) return 'bg-yellow-100 text-yellow-700 border-yellow-200';
    return 'bg-green-100 text-green-700 border-green-200';
  };

  const getSentimentColor = (sentiment?: string) => {
    switch (sentiment) {
      case 'positive':
        return 'bg-green-50 border-l-green-400';
      case 'negative':
        return 'bg-red-50 border-l-red-400';
      default:
        return 'bg-blue-50 border-l-blue-400';
    }
  };

  const formatCurrency = (amount?: number) => {
    if (!amount) return '';
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const detectEmailInsights = (thread: EmailThread) => {
    const insights = [];
    
    if (thread.leadScore && thread.leadScore > 75) {
      insights.push({ type: 'hot_lead', message: 'High-quality lead detected', icon: '🔥' });
    }
    
    if (thread.hasSchedulingRequest) {
      insights.push({ type: 'scheduling', message: 'Scheduling request detected', icon: '📅' });
    }
    
    if (thread.propertyInfo?.price) {
      insights.push({ 
        type: 'property', 
        message: `Property inquiry: ${formatCurrency(thread.propertyInfo.price)}`,
        icon: '🏠' 
      });
    }
    
    if (thread.urgency && thread.urgency > 7) {
      insights.push({ type: 'urgent', message: 'High urgency detected', icon: '⚡' });
    }
    
    return insights;
  };

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 1) {
      return 'Just now';
    } else if (diffInHours < 24) {
      return `${Math.floor(diffInHours)}h ago`;
    } else if (diffInHours < 48) {
      return 'Yesterday';
    } else {
      return date.toLocaleDateString();
    }
  };

  // AI Analysis Helper Functions
  const getCategoryColor = (category: string) => {
    const colors = {
      'hot_lead': 'bg-red-100 text-red-800 border-red-300',
      'showing_request': 'bg-blue-100 text-blue-800 border-blue-300',
      'buyer_lead': 'bg-green-100 text-green-800 border-green-300',
      'seller_lead': 'bg-purple-100 text-purple-800 border-purple-300',
      'price_inquiry': 'bg-yellow-100 text-yellow-800 border-yellow-300',
      'follow_up': 'bg-gray-100 text-gray-800 border-gray-300',
      'contract': 'bg-indigo-100 text-indigo-800 border-indigo-300',
      'marketing': 'bg-pink-100 text-pink-800 border-pink-300',
    };
    return colors[category as keyof typeof colors] || colors.follow_up;
  };

  const getCategoryIcon = (category: string) => {
    const icons = {
      'hot_lead': <Fire className="h-3 w-3 mr-1" />,
      'showing_request': <Home className="h-3 w-3 mr-1" />,
      'buyer_lead': <ShoppingCart className="h-3 w-3 mr-1" />,
      'seller_lead': <DollarSign className="h-3 w-3 mr-1" />,
      'price_inquiry': <Calculator className="h-3 w-3 mr-1" />,
      'follow_up': <Clock className="h-3 w-3 mr-1" />,
      'contract': <FileText className="h-3 w-3 mr-1" />,
      'marketing': <Zap className="h-3 w-3 mr-1" />,
    };
    return icons[category as keyof typeof icons] || icons.follow_up;
  };

  const formatCategory = (category: string) => {
    const labels = {
      'hot_lead': 'Hot Lead',
      'showing_request': 'Showing',
      'buyer_lead': 'Buyer',
      'seller_lead': 'Seller',
      'price_inquiry': 'Pricing',
      'follow_up': 'Follow Up',
      'contract': 'Contract',
      'marketing': 'Marketing',
    };
    return labels[category as keyof typeof labels] || 'General';
  };

  const getPriorityColor = (priority: string) => {
    const colors = {
      'high': 'border-red-300 text-red-700',
      'medium': 'border-yellow-300 text-yellow-700',
      'low': 'border-green-300 text-green-700',
    };
    return colors[priority as keyof typeof colors] || colors.medium;
  };

  const getPriorityIcon = (priority: string) => {
    const icons = {
      'high': <AlertTriangle className="h-3 w-3 mr-1" />,
      'medium': <Clock className="h-3 w-3 mr-1" />,
      'low': <CheckCircle className="h-3 w-3 mr-1" />,
    };
    return icons[priority as keyof typeof icons] || icons.medium;
  };

  // Handler Functions
  const handleCategoryChange = async (threadId: string, currentCategory: string) => {
    setCategoryModalThread({ id: threadId, category: currentCategory });
    setCategoryModalOpen(true);
  };

  const handleCategoryUpdate = async (threadId: string, newCategory: string) => {
    // Refresh threads to show updated category
    await fetchThreads();
  };

  const handlePriorityChange = async (threadId: string, currentPriority: string) => {
    const priorities = ['low', 'medium', 'high'];
    const currentIndex = priorities.indexOf(currentPriority);
    const nextPriority = priorities[(currentIndex + 1) % priorities.length];
    
    try {
      const response = await fetch(`/api/inbox/threads/${threadId}/actions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'update_priority',
          data: { priority: nextPriority }
        })
      });

      if (response.ok) {
        // Refresh threads to show updated priority
        await fetchThreads();
      } else {
        console.error('Failed to update priority');
      }
    } catch (error) {
      console.error('Error updating priority:', error);
    }
  };

  const handleAddToPipeline = async (thread: EmailThread) => {
    try {
      // Extract contact info from thread
      const contactInfo = {
        contactName: thread.participants[0]?.name || 'Unknown Contact',
        contactEmail: thread.participants[0]?.email || '',
        propertyAddress: thread.propertyInfo?.address || '',
        propertyType: thread.propertyInfo?.propertyType || '',
        budget: thread.propertyInfo?.price || '',
        timeline: thread.extractedData?.timeline || '',
        notes: `Email thread: ${thread.subject}\nAI Analysis: ${thread.aiAnalysis?.category} (${thread.aiAnalysis?.leadScore}% lead score)`
      };

      const response = await fetch(`/api/inbox/threads/${thread.id}/actions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'add_to_pipeline',
          data: contactInfo
        })
      });

      const result = await response.json();

      if (response.ok) {
        // Show success message
        alert(`Successfully added ${contactInfo.contactName} to pipeline!`);
        
        // Refresh threads to show updated state
        await fetchThreads();
      } else {
        if (response.status === 409) {
          alert('This contact is already in your pipeline!');
        } else {
          alert(`Failed to add to pipeline: ${result.error}`);
        }
      }
    } catch (error) {
      console.error('Error adding to pipeline:', error);
      alert('Failed to add to pipeline. Please try again.');
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-500"></div>
      </div>
    );
  }

  return (
    <div className="h-full flex">
      {/* Thread List */}
      <div className={cn(
        "flex flex-col border-r border-slate-200 dark:border-slate-700",
        viewMode === 'split' ? "w-1/3" : "w-full"
      )}>
        {/* Auto-Refresh Controls */}
        <div className="flex items-center justify-between p-3 border-b border-slate-200 dark:border-slate-700">
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={manualRefresh}
              disabled={refreshing}
              className="h-8"
            >
              <RefreshCw className={cn("h-4 w-4 mr-2", refreshing && "animate-spin")} />
              {refreshing ? 'Refreshing...' : 'Refresh'}
            </Button>
            
            <Button
              variant={autoRefreshEnabled ? "default" : "outline"}
              size="sm"
              onClick={() => setAutoRefreshEnabled(!autoRefreshEnabled)}
              className="h-8"
            >
              <Bell className="h-4 w-4 mr-2" />
              Auto-refresh {autoRefreshEnabled ? 'On' : 'Off'}
            </Button>
          </div>
          
          {lastSyncTime && (
            <div className="text-xs text-slate-500 dark:text-slate-400">
              Last sync: {new Date(lastSyncTime).toLocaleTimeString()}
            </div>
          )}
          
          {syncStatus && (
            <div className="flex items-center gap-1 text-xs">
              {syncStatus.overallHealth === 'healthy' ? (
                <CheckCircle className="h-3 w-3 text-green-500" />
              ) : (
                <AlertTriangle className="h-3 w-3 text-yellow-500" />
              )}
              <span className={cn(
                syncStatus.overallHealth === 'healthy' ? 'text-green-600' : 'text-yellow-600'
              )}>
                {syncStatus.overallHealth === 'healthy' ? 'Synced' : 'Attention needed'}
              </span>
            </div>
          )}
        </div>

        {/* Thread List */}
        <div className="flex-1 overflow-y-auto">
          {threads.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-full text-center p-8">
              <Mail className="h-12 w-12 text-slate-400 mb-4" />
              <h3 className="text-lg font-medium text-slate-900 dark:text-slate-100 mb-2">
                No emails found
              </h3>
              <p className="text-slate-600 dark:text-slate-400 mb-4">
                {searchQuery ? 'Try adjusting your search terms' : 'Connect your email account to get started'}
              </p>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Connect Email
              </Button>
            </div>
          ) : (
            <div className="divide-y divide-slate-200 dark:divide-slate-700">
              {threads.map((thread) => (
                <motion.div
                  key={thread.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={cn(
                    "p-4 cursor-pointer transition-colors hover:bg-slate-50 dark:hover:bg-slate-800/50",
                    selectedThread?.id === thread.id && "bg-blue-50 dark:bg-blue-900/20 border-r-2 border-blue-500"
                  )}
                  onClick={() => setSelectedThread(thread)}
                >
                  <div className="flex items-start gap-3">
                    {/* Avatar */}
                    <Avatar className="h-10 w-10 flex-shrink-0">
                      <AvatarImage src={thread.participants[0]?.email ? `/api/avatar/${thread.participants[0].email}` : undefined} />
                      <AvatarFallback>
                        {thread.participants[0]?.name?.charAt(0) || 'E'}
                      </AvatarFallback>
                    </Avatar>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <h3 className={cn(
                          "font-medium text-sm truncate",
                          thread.unread && "font-semibold"
                        )}>
                          {thread.subject || 'No Subject'}
                        </h3>
                        {thread.starred && (
                          <Star className="h-3 w-3 text-yellow-500 fill-current" />
                        )}
                        {thread.hasAttachments && (
                          <FileText className="h-3 w-3 text-slate-400" />
                        )}
                      </div>

                      <p className="text-sm text-slate-600 dark:text-slate-400 mb-2 line-clamp-2">
                        {thread.snippet}
                      </p>

                      <div className="flex items-center gap-2 text-xs text-slate-500">
                        <span>{thread.participants[0]?.name || thread.participants[0]?.email || 'Unknown'}</span>
                        <span>•</span>
                        <span>{formatTime(thread.lastMessageAt)}</span>
                        {thread.messageCount > 1 && (
                          <>
                            <span>•</span>
                            <span>{thread.messageCount} messages</span>
                          </>
                        )}
                      </div>

                      {/* AI Analysis Badges */}
                      <div className="flex items-center gap-1 mt-2 flex-wrap">
                        {thread.aiAnalysis && (
                          <>
                            {/* Category Badge */}
                            <Badge 
                              variant="default"
                              className={cn(
                                "text-xs cursor-pointer hover:opacity-80",
                                getCategoryColor(thread.aiAnalysis.category)
                              )}
                              onClick={(e) => {
                                e.stopPropagation();
                                handleCategoryChange(thread.id, thread.aiAnalysis?.category || 'follow_up');
                              }}
                            >
                              {getCategoryIcon(thread.aiAnalysis.category)}
                              {formatCategory(thread.aiAnalysis.category)}
                            </Badge>

                            {/* Priority Badge */}
                            <Badge 
                              variant="outline"
                              className={cn(
                                "text-xs cursor-pointer hover:opacity-80",
                                getPriorityColor(thread.priority)
                              )}
                              onClick={(e) => {
                                e.stopPropagation();
                                handlePriorityChange(thread.id, thread.priority);
                              }}
                            >
                              {getPriorityIcon(thread.priority)}
                              {thread.priority?.toUpperCase()}
                            </Badge>

                            {/* Lead Score Badge */}
                            {thread.aiAnalysis.leadScore > 60 && (
                              <Badge variant="secondary" className="text-xs">
                                <Target className="h-3 w-3 mr-1" />
                                {thread.aiAnalysis.leadScore}% Lead
                              </Badge>
                            )}

                            {/* Sentiment Badge */}
                            {thread.sentiment && thread.sentiment !== 'neutral' && (
                              <Badge 
                                variant="outline" 
                                className={cn(
                                  "text-xs",
                                  thread.sentiment === 'positive' ? 'text-green-600 border-green-300' : 'text-red-600 border-red-300'
                                )}
                              >
                                {thread.sentiment === 'positive' ? '😊' : '😕'}
                                {thread.sentiment}
                              </Badge>
                            )}
                          </>
                        )}

                        {/* Add to Pipeline Button */}
                        {thread.aiAnalysis && ['hot_lead', 'buyer_lead', 'seller_lead', 'showing_request'].includes(thread.aiAnalysis.category) && (
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-6 text-xs px-2 ml-auto"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleAddToPipeline(thread);
                            }}
                          >
                            <Plus className="h-3 w-3 mr-1" />
                            Pipeline
                          </Button>
                        )}

                        {/* Original Labels */}
                        {thread.labels.length > 0 && thread.labels.slice(0, 1).map((label) => (
                          <Badge key={label} variant="secondary" className="text-xs">
                            {label}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    {/* Actions */}
                    <div className="flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity">
                      <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                        <MoreHorizontal className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Thread Panel */}
      {viewMode === 'split' && (
        <div className="flex-1 flex flex-col">
          {selectedThread ? (
            <>
              {/* Thread Header */}
              <div className="p-4 border-b border-slate-200 dark:border-slate-700">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold">{selectedThread.subject || 'No Subject'}</h3>
                  <div className="flex items-center gap-2">
                    <Button variant="ghost" size="sm">
                      <Reply className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="sm">
                      <ReplyAll className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="sm">
                      <Forward className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="sm">
                      <MoreHorizontal className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <div className="flex items-center gap-4 text-sm text-slate-600 dark:text-slate-400">
                  <div className="flex items-center gap-2">
                    <span>From:</span>
                    <span className="font-medium">
                      {selectedThread.participants[0]?.name || selectedThread.participants[0]?.email || 'Unknown'}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span>To:</span>
                    <span className="font-medium">
                      {selectedThread.participants.slice(1).map(p => p.name || p.email).join(', ') || 'You'}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="h-3 w-3" />
                    <span>{formatTime(selectedThread.lastMessageAt)}</span>
                  </div>
                </div>
              </div>

              {/* Thread Content */}
              <div className="flex-1 overflow-y-auto p-4">
                <div className="prose prose-sm max-w-none">
                  <p className="text-slate-700 dark:text-slate-300">
                    {selectedThread.snippet}
                  </p>
                  <p className="text-slate-500 text-sm mt-4">
                    This is a preview of the email content. The full message would be displayed here with proper formatting.
                  </p>
                </div>

                {/* AI Summary Card */}
                <Card className="mt-6">
                  <CardHeader className="pb-3">
                    <CardTitle className="flex items-center gap-2 text-sm">
                      <Sparkles className="h-4 w-4 text-blue-500" />
                      AI Summary
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="text-xs">
                          Intent: {contact?.intentScore ? `${contact.intentScore}%` : 'Unknown'}
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          Priority: Medium
                        </Badge>
                      </div>
                      <p className="text-sm text-slate-600 dark:text-slate-400">
                        This appears to be a {contact?.intentScore && contact.intentScore > 70 ? 'high-intent' : 'general'} email. 
                        {contact?.intentScore && contact.intentScore > 70 ? ' Consider following up promptly.' : ' Standard response timeline applies.'}
                      </p>
                      <div className="flex items-center gap-2">
                        <Button size="sm" variant="outline">
                          <Target className="h-3 w-3 mr-1" />
                          Mark as Lead
                        </Button>
                        <Button size="sm" variant="outline">
                          <CheckSquare className="h-3 w-3 mr-1" />
                          Create Task
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </>
          ) : (
            <div className="flex-1 flex items-center justify-center">
              <div className="text-center">
                <Mail className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-slate-900 dark:text-slate-100 mb-2">
                  Select an email
                </h3>
                <p className="text-slate-600 dark:text-slate-400">
                  Choose an email from the list to view its content
                </p>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Contact Panel */}
      {viewMode === 'split' && showContactPanel && contact && (
        <div className="w-80 border-l border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-900/50">
          <div className="p-4 border-b border-slate-200 dark:border-slate-700">
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-semibold">Contact</h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowContactPanel(false)}
              >
                <EyeOff className="h-4 w-4" />
              </Button>
            </div>
          </div>

          <div className="p-4 space-y-4">
            {/* Contact Info */}
            <div className="flex items-center gap-3">
              <Avatar className="h-12 w-12">
                <AvatarImage src={contact.avatarUrl} />
                <AvatarFallback>
                  {contact.name.charAt(0)}
                </AvatarFallback>
              </Avatar>
              <div>
                <h4 className="font-medium">{contact.name}</h4>
                <p className="text-sm text-slate-600 dark:text-slate-400">{contact.email}</p>
                {contact.company && (
                  <p className="text-sm text-slate-600 dark:text-slate-400">{contact.company}</p>
                )}
              </div>
            </div>

            {/* Intent Score */}
            {contact.intentScore && (
              <div>
                <h5 className="text-sm font-medium mb-2">Intent Score</h5>
                <Badge className={cn("text-xs", getIntentColor(contact.intentScore))}>
                  {contact.intentScore}% likely to convert
                </Badge>
              </div>
            )}

            {/* Contact Details */}
            <div className="space-y-2">
              {contact.phone && (
                <div className="flex items-center gap-2 text-sm">
                  <Phone className="h-4 w-4 text-slate-400" />
                  <span>{contact.phone}</span>
                </div>
              )}
              {contact.location && (
                <div className="flex items-center gap-2 text-sm">
                  <MapPin className="h-4 w-4 text-slate-400" />
                  <span>{contact.location}</span>
                </div>
              )}
              {contact.title && (
                <div className="flex items-center gap-2 text-sm">
                  <Briefcase className="h-4 w-4 text-slate-400" />
                  <span>{contact.title}</span>
                </div>
              )}
            </div>

            {/* Tags */}
            {contact.tags.length > 0 && (
              <div>
                <h5 className="text-sm font-medium mb-2">Tags</h5>
                <div className="flex flex-wrap gap-1">
                  {contact.tags.map((tag) => (
                    <Badge key={tag} variant="secondary" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {/* Deal History */}
            {contact.dealHistory && contact.dealHistory.length > 0 && (
              <div>
                <h5 className="text-sm font-medium mb-2">Deal History</h5>
                <div className="space-y-2">
                  {contact.dealHistory.slice(0, 3).map((deal) => (
                    <div key={deal.id} className="p-2 bg-white dark:bg-slate-800 rounded border">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">{deal.title}</span>
                        <span className="text-sm text-green-600">${deal.value.toLocaleString()}</span>
                      </div>
                      <div className="flex items-center gap-2 mt-1">
                        <Badge variant="outline" className={cn("text-xs", getStageColor(deal.stage))}>
                          {deal.stage}
                        </Badge>
                        <span className="text-xs text-slate-500">{deal.status}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Notes */}
            {contact.notes && (
              <div>
                <h5 className="text-sm font-medium mb-2">Notes</h5>
                <p className="text-sm text-slate-600 dark:text-slate-400">{contact.notes}</p>
              </div>
            )}

            {/* Quick Actions */}
            <div className="space-y-2">
              <Button size="sm" className="w-full justify-start">
                <Mail className="h-4 w-4 mr-2" />
                Send Email
              </Button>
              <Button size="sm" variant="outline" className="w-full justify-start">
                <Calendar className="h-4 w-4 mr-2" />
                Schedule Meeting
              </Button>
              <Button size="sm" variant="outline" className="w-full justify-start">
                <CheckSquare className="h-4 w-4 mr-2" />
                Create Task
              </Button>
              <Button size="sm" variant="outline" className="w-full justify-start">
                <Target className="h-4 w-4 mr-2" />
                Add to Pipeline
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Category Modal */}
      <CategoryModal
        isOpen={categoryModalOpen}
        onClose={() => {
          setCategoryModalOpen(false);
          setCategoryModalThread(null);
        }}
        currentCategory={categoryModalThread?.category || 'follow_up'}
        threadId={categoryModalThread?.id || ''}
        onCategoryChange={handleCategoryUpdate}
      />
    </div>
  );
}
